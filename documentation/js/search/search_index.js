var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.194,1,2.153]],["body/modules/AppModule.html",[0,2.181,1,4.314,2,2.237,3,2.021,4,2.448,5,2.448,6,2.021,7,2.215,8,2.448,9,3.131,10,3.131,11,3.65,12,0.029,13,3.65,14,3.65,15,3.33,16,3.204,17,2.448,18,2.448,19,0.263,20,0.263,21,0.187,22,3.725,23,0.303,24,4.098,25,4.098,26,3.204,27,0.423,28,0.631,29,3.725,30,3.725,31,3.725,32,3.725,33,3.131,34,2.74,35,0.263,36,0.071,37,0.016,38,0.021,39,0.016]],["title/controllers/AuthController.html",[40,1.631,41,2.153]],["body/controllers/AuthController.html",[12,0.029,19,0.182,20,0.182,21,0.13,23,0.364,27,0.425,28,0.437,35,0.182,36,0.049,37,0.011,38,0.016,39,0.011,40,2.225,41,2.483,42,1.534,43,2.169,44,2.169,45,2.669,46,0.3,47,1.188,48,3.62,49,1.896,50,3.62,51,2.58,52,3.887,53,4.92,54,1.279,55,3.778,56,2.247,57,2.58,58,4.136,59,3.234,60,1.354,61,2.483,62,2.221,63,3.234,64,3.176,65,0.696,66,2.58,67,1.104,68,1.025,69,0.633,70,0.696,71,2.926,72,1.24,73,3.361,74,2.169,75,2.508,76,2.58,77,2.779,78,2.087,79,2.483,80,2.58,81,2.087,82,1.696,83,2.169,84,2.58,85,2.247,86,1.534,87,3.176,88,2.169,89,2.225,90,1.898,91,2.169,92,1.534,93,2.58,94,2.58,95,2.779,96,2.58,97,2.169,98,2.483,99,2.58,100,2.169,101,1.696,102,2.58,103,2.658,104,1.534,105,1.696,106,1.696,107,2.58,108,1.285,109,1.184,110,1.896,111,2.58,112,2.58,113,2.483,114,2.58,115,0.882,116,2.58,117,2.58,118,2.58,119,1.094,120,2.58]],["title/modules/AuthModule.html",[0,1.194,11,1.948]],["body/modules/AuthModule.html",[0,1.855,2,1.5,3,1.774,4,2.149,5,2.149,6,1.774,7,3.027,8,2.937,11,3.874,12,0.029,15,3.208,16,2.937,17,2.149,18,2.149,19,0.231,20,0.231,21,0.164,26,2.937,27,0.447,28,0.554,35,0.231,36,0.063,37,0.014,38,0.019,39,0.014,41,3.345,42,2.657,89,2.944,90,2.406,121,2.749,122,3.27,123,2.749,124,3.516,125,3.516,126,2.713,127,3.27,128,4.024,129,2.149,130,4.468,131,2.406,132,4.468,133,1.774,134,2.149,135,3.27,136,3.27,137,3.27,138,3.27,139,3.27,140,3.27,141,3.27,142,2.749,143,2.749,144,3.27,145,2.749,146,3.27,147,3.27,148,3.27]],["title/classes/AuthResponse.html",[36,0.063,73,1.948]],["body/classes/AuthResponse.html",[12,0.028,19,0.317,20,0.317,21,0.225,23,0.365,27,0.317,35,0.317,36,0.086,37,0.019,38,0.023,39,0.019,45,2.972,46,0.52,54,1.516,65,0.825,69,0.576,73,3.258,92,3.258,149,1.633,150,4.605,151,3.765,152,3.761,153,1.855,154,1.28,155,5.918,156,4.479,157,1.76]],["title/injectables/AuthService.html",[89,1.631,158,0.555]],["body/injectables/AuthService.html",[12,0.029,19,0.16,20,0.16,21,0.113,23,0.403,27,0.382,28,0.382,35,0.16,36,0.043,37,0.01,38,0.015,39,0.01,45,1.856,46,0.262,47,1.076,48,3.389,49,2.209,50,3.389,58,2.876,59,2.248,60,1.523,65,0.912,67,1.447,68,1.344,69,0.637,70,0.912,72,1.404,73,3.393,74,2.876,75,2.364,78,1.451,81,2.364,88,1.898,89,1.703,91,1.898,92,1.343,109,1.895,110,2.1,115,1.156,119,1.752,126,2.483,131,1.661,134,1.484,152,2.456,154,1.359,158,0.579,159,0.887,160,1.898,161,2.516,162,3.663,163,3.421,164,3.421,165,1.57,166,2.258,167,2.593,168,5.411,169,2.258,170,3.421,171,2.258,172,3.421,173,2.248,174,1.57,175,3.421,176,2.258,177,2.258,178,3.421,179,3.642,180,2.258,181,2.034,182,1.81,183,1.898,184,2.258,185,1.81,186,2.258,187,2.516,188,3.421,189,2.258,190,2.258,191,3.421,192,1.703,193,2.258]],["title/classes/BaseEntity.html",[36,0.063,194,2.153]],["body/classes/BaseEntity.html",[12,0.029,19,0.262,20,0.262,21,0.186,23,0.302,27,0.383,35,0.262,36,0.093,37,0.016,38,0.021,39,0.016,46,0.43,54,1.835,62,2.06,65,0.998,69,0.768,149,1.35,153,1.644,154,1.134,157,1.455,192,2.698,194,3.192,195,3.113,196,4.857,197,3.573,198,3.573,199,4.083,200,3.987,201,3.987,202,4.835,203,4.083,204,3.113,205,4.835,206,3.704,207,4.083,208,3.704,209,3.113,210,3.704,211,4.555,212,4.555,213,2.009,214,4.857,215,3.704,216,4.857,217,2.009,218,3.704,219,4.083]],["title/classes/BasicUserDto.html",[36,0.063,220,1.777]],["body/classes/BasicUserDto.html",[12,0.029,19,0.244,20,0.244,21,0.173,23,0.281,27,0.328,35,0.37,36,0.112,37,0.015,38,0.02,39,0.015,46,0.401,54,1.772,60,1.363,65,0.964,69,0.673,70,0.636,75,1.465,149,1.259,153,1.57,154,1.457,157,1.357,174,1.585,182,2.057,220,3.167,221,2.054,222,2.309,223,3.471,224,2.84,225,2.84,226,3.113,227,3.455,228,3.651,229,3.455,230,3.455,231,2.271,232,2.054,233,1.585,234,2.373,235,2.758,236,1.772,237,1.874,238,2.271,239,2.271,240,1.585,241,2.271,242,1.72,243,1.585]],["title/classes/ChangePasswordDto.html",[36,0.063,243,1.503]],["body/classes/ChangePasswordDto.html",[12,0.029,19,0.257,20,0.257,21,0.183,23,0.296,27,0.339,35,0.38,36,0.114,37,0.015,38,0.02,39,0.015,46,0.423,54,1.233,60,1.387,65,0.671,69,0.468,70,0.671,75,1.544,149,1.327,153,1.626,154,1.425,157,1.431,174,1.671,182,1.431,220,3.1,221,2.165,222,1.813,223,3.532,224,1.975,225,1.975,226,2.856,228,3.532,231,2.393,232,2.165,233,1.671,234,2.423,235,2.856,236,2.065,237,1.975,238,2.393,239,2.393,240,1.671,241,2.393,242,2.391,243,2.204,244,2.678,245,3.641]],["title/modules/CommonModule.html",[0,1.194,13,1.948]],["body/modules/CommonModule.html",[0,2.027,2,2.107,7,2.73,12,0.029,13,3.307,19,0.324,20,0.324,21,0.23,27,0.423,28,0.777,35,0.324,36,0.088,37,0.019,38,0.024,39,0.019,100,3.859,246,4.591,247,5.561,248,3.377,249,3.655,250,3.377,251,4.591,252,4.591]],["title/modules/ConfigModule.html",[0,1.194,14,1.948]],["body/modules/ConfigModule.html",[0,2.102,2,1.709,12,0.029,14,3.232,19,0.263,20,0.263,21,0.187,23,0.303,26,2.448,27,0.434,28,0.631,33,3.131,35,0.263,36,0.071,37,0.016,38,0.021,39,0.016,62,2.445,69,0.479,128,3.998,129,2.448,142,3.131,143,3.131,236,1.261,253,3.725,254,4.875,255,3.725,256,3.131,257,2.448,258,3.586,259,3.725,260,3.586,261,3.725,262,3.586,263,3.725,264,3.725,265,3.725,266,3.725,267,3.725,268,3.725,269,3.131,270,3.725,271,3.131,272,3.725,273,3.131,274,3.725,275,3.725,276,3.131,277,3.725,278,3.131,279,3.725,280,3.725,281,2.448,282,3.131,283,3.725,284,3.725,285,3.725,286,3.725,287,3.725]],["title/classes/CreateUserDto.html",[36,0.063,75,1.39]],["body/classes/CreateUserDto.html",[12,0.029,19,0.232,20,0.232,21,0.165,23,0.268,27,0.317,35,0.361,36,0.11,37,0.014,38,0.019,39,0.014,46,0.382,54,1.856,60,1.34,65,1.01,69,0.705,70,0.605,75,1.902,149,1.198,153,1.518,154,1.461,157,1.291,174,2.057,182,2.005,220,3.347,221,1.954,222,1.636,223,3.412,224,2.769,225,2.769,226,3.035,228,3.604,231,2.16,232,1.954,233,1.508,234,2.434,235,2.666,236,1.942,237,1.783,238,2.16,239,2.16,240,1.508,241,2.16,242,1.636,243,1.508,244,2.418,288,2.763,289,3.287,290,4.29,291,3.287,292,3.287,293,3.287]],["title/interfaces/IApiDocOptions.html",[294,1.631,295,2.153]],["body/interfaces/IApiDocOptions.html",[12,0.029,19,0.26,20,0.26,21,0.185,23,0.44,27,0.342,28,0.819,35,0.26,37,0.021,38,0.021,39,0.016,40,1.833,46,0.428,54,1.247,69,0.622,70,0.891,71,2.19,72,0.928,85,2.19,86,2.19,105,3.918,106,4.022,110,1.562,115,0.86,153,1.638,154,1.262,157,1.447,185,1.901,294,1.833,295,3.772,296,2.709,297,2.42,298,4.543,299,4.067,300,4.067,301,3.682,302,4.067,303,3.682,304,4.067,305,2.709,306,2.42,307,2.42,308,3.096,309,2.42,310,2.709,311,3.096,312,3.096,313,3.096,314,2.709,315,3.096,316,3.096,317,3.096,318,2.709]],["title/interfaces/IRoteDocOptions.html",[294,1.631,319,2.153]],["body/interfaces/IRoteDocOptions.html",[12,0.029,19,0.198,20,0.198,21,0.141,23,0.459,27,0.284,28,0.68,35,0.198,37,0.017,38,0.017,39,0.012,46,0.326,54,0.95,61,3.701,63,3.811,69,0.837,70,1.154,72,0.707,79,3.701,103,1.668,104,1.668,110,1.19,113,3.811,115,0.655,153,1.359,154,1.095,157,1.102,185,1.577,198,2.064,294,1.397,296,2.064,297,1.844,298,5.075,299,3.374,305,2.064,306,1.844,307,1.844,308,2.358,309,3.363,318,2.064,319,3.081,320,4.874,321,4.266,322,5.631,323,3.374,324,2.806,325,3.374,326,2.806,327,2.806,328,2.806,329,3.081,330,4.143,331,2.358,332,2.806,333,2.358,334,2.358,335,2.064,336,2.064,337,2.358,338,1.522,339,2.358,340,2.358,341,2.358,342,3.374,343,2.358,344,2.358,345,2.358,346,2.358]],["title/classes/IValidateClass.html",[36,0.063,347,2.153]],["body/classes/IValidateClass.html",[12,0.029,19,0.25,20,0.25,21,0.177,27,0.374,28,0.598,35,0.25,36,0.108,37,0.015,38,0.02,39,0.015,49,1.498,56,2.099,62,1.498,71,3.357,72,0.889,78,1.498,81,1.996,82,3.479,101,2.321,108,1.758,109,1.62,110,1.498,115,1.099,119,1.498,149,1.287,158,0.797,173,2.321,179,2.597,181,2.798,185,2.31,213,1.915,233,1.62,329,2.321,347,3.479,348,2.597,349,2.871,350,3.462,351,3.956,352,2.968,353,2.343,354,2.968,355,2.597,356,2.968,357,2.597,358,2.968,359,2.099,360,2.968,361,2.968,362,2.968,363,2.968,364,2.968,365,2.099,366,2.597,367,2.968,368,2.968,369,2.968,370,3.956,371,2.968,372,2.968,373,1.915,374,2.968,375,3.956,376,2.968]],["title/injectables/JwtAuthGuard.html",[158,0.555,249,2.153]],["body/injectables/JwtAuthGuard.html",[12,0.029,19,0.32,20,0.235,21,0.167,23,0.271,27,0.389,28,0.564,35,0.235,36,0.064,37,0.014,38,0.019,39,0.014,45,2.454,46,0.387,47,1.423,60,1.346,62,1.412,65,0.946,67,1.501,68,1.394,69,0.582,70,0.946,72,1.14,78,1.412,97,2.799,106,2.973,108,1.658,115,1.2,133,1.806,152,2.69,158,0.766,159,1.308,165,1.528,185,1.308,234,1.412,248,2.449,249,2.973,250,4.054,349,2.99,350,3.327,353,2.252,365,1.98,366,3.327,373,2.454,377,2.449,378,3.802,379,3.329,380,5.944,381,3.329,382,3.329,383,3.802,384,3.329,385,4.054,386,4.523,387,2.799,388,2.449,389,2.449,390,3.329,391,2.188,392,3.329,393,3.329,394,3.329,395,3.329,396,2.449,397,2.799,398,2.799]],["title/injectables/JwtStrategy.html",[124,1.948,158,0.555]],["body/injectables/JwtStrategy.html",[12,0.029,19,0.256,20,0.256,21,0.182,23,0.295,27,0.419,28,0.613,35,0.256,36,0.069,37,0.015,38,0.02,39,0.015,46,0.42,47,1.505,65,0.881,67,1.398,68,1.299,69,0.615,70,0.881,72,0.912,115,0.846,124,2.845,128,4.48,129,2.379,133,1.964,145,3.043,152,3.187,158,0.81,159,1.422,165,1.661,181,2.845,182,1.422,192,1.802,234,1.536,294,1.802,310,2.663,391,2.379,399,4.505,400,3.043,401,3.942,402,4.505,403,3.62,404,3.62,405,4.784,406,5.701,407,3.62,408,3.62,409,3.942,410,3.62,411,3.043,412,3.62,413,3.043,414,3.62,415,3.62,416,3.62,417,3.62,418,3.62,419,3.62,420,3.62]],["title/injectables/LocalAuthGuard.html",[98,2.153,158,0.555]],["body/injectables/LocalAuthGuard.html",[12,0.029,19,0.355,20,0.275,21,0.196,23,0.317,27,0.355,28,0.66,35,0.275,36,0.075,37,0.017,38,0.021,39,0.017,45,2.722,46,0.452,47,1.578,60,1.417,65,0.924,67,1.138,68,1.057,70,0.717,72,0.981,78,1.652,98,3.298,115,0.91,133,2.113,158,0.85,159,1.53,165,2.547,234,1.652,338,2.113,353,2.498,373,2.722,377,2.865,378,4.218,383,4.218,385,4.314,387,3.274,391,2.56,396,2.865,397,3.274,398,3.274,421,4.667,422,3.298,423,3.895,424,3.895,425,2.865,426,3.895,427,2.865]],["title/injectables/LocalStrategy.html",[125,1.948,158,0.555]],["body/injectables/LocalStrategy.html",[12,0.029,19,0.245,20,0.245,21,0.174,23,0.283,27,0.413,28,0.588,35,0.245,36,0.066,37,0.015,38,0.02,39,0.015,46,0.403,47,1.464,49,2.226,60,1.31,65,0.857,67,1.36,68,1.263,69,0.599,70,0.857,72,0.875,78,1.473,81,1.974,89,2.997,90,2.555,108,1.729,115,0.811,119,1.473,125,2.768,133,1.884,154,1.406,158,0.788,159,1.365,165,1.594,181,2.768,182,2.063,183,2.92,185,1.365,234,1.473,236,1.979,338,1.884,373,1.884,391,2.283,401,3.862,402,4.413,411,2.92,413,2.92,422,3.45,425,2.555,427,2.555,428,4.413,429,2.92,430,3.473,431,3.473,432,4.654,433,3.473,434,3.473,435,3.473,436,3.473,437,2.555]],["title/injectables/PasswordService.html",[126,1.503,158,0.555]],["body/injectables/PasswordService.html",[12,0.029,19,0.227,20,0.227,21,0.161,23,0.411,27,0.312,28,0.544,35,0.227,36,0.062,37,0.014,38,0.019,39,0.014,46,0.373,47,1.388,49,2.494,65,0.929,67,1.29,68,1.198,69,0.568,70,0.813,72,1.368,81,2.602,109,2.314,110,2.139,115,1.031,119,1.872,126,2.026,153,1.494,154,1.454,158,0.748,159,1.262,161,3.247,162,3.315,173,3.569,236,1.838,438,2.701,439,5.043,440,4.414,441,4.414,442,4.414,443,5.881,444,3.213,445,4.414,446,4.414,447,5.692,448,4.414,449,3.213,450,2.701,451,2.112,452,2.112,453,3.711,454,3.213,455,3.711,456,3.213,457,3.213,458,3.213]],["title/injectables/ResponseTimeoutInterceptor.html",[158,0.555,459,2.41]],["body/injectables/ResponseTimeoutInterceptor.html",[12,0.029,19,0.233,20,0.233,21,0.166,23,0.269,27,0.362,28,0.559,35,0.233,36,0.063,37,0.014,38,0.019,39,0.014,46,0.384,47,1.415,65,0.943,67,1.315,68,1.221,69,0.658,70,0.829,72,0.832,92,2.676,108,1.645,109,2.521,115,1.195,153,1.523,158,0.762,159,1.298,162,3.363,165,1.516,281,2.957,349,2.981,359,1.964,365,1.964,385,2.43,450,4.618,451,2.171,452,2.171,459,3.31,460,4.618,461,2.777,462,3.782,463,5.117,464,4.499,465,4.499,466,5.117,467,3.782,468,3.303,469,3.303,470,4.499,471,3.303,472,3.782,473,3.764,474,4.618,475,3.303,476,4.301,477,4.499,478,3.303,479,3.782,480,4.499,481,3.303,482,4.499,483,2.43,484,3.303,485,2.777,486,2.777,487,3.303,488,3.303,489,3.303,490,3.303,491,3.303,492,3.303]],["title/classes/SchemaSync1614798846236.html",[36,0.063,493,2.41]],["body/classes/SchemaSync1614798846236.html",[12,0.028,19,0.237,20,0.237,21,0.168,27,0.237,35,0.237,36,0.064,37,0.014,38,0.019,39,0.014,46,0.39,47,1.43,49,2.527,65,0.95,67,1.329,68,1.569,69,0.663,70,0.838,72,1.146,77,3.345,81,2.345,119,1.929,149,1.223,153,1.539,154,0.784,174,1.54,187,4.251,192,2.264,200,2.468,201,2.468,217,1.82,224,1.82,225,1.82,359,2.704,451,3.634,452,2.205,493,4.068,494,4.648,495,2.821,496,5.158,497,5.008,498,3.822,499,3.355,500,4.547,501,6.283,502,3.355,503,4.547,504,3.355,505,3.355,506,3.822,507,3.345,508,3.355,509,3.355,510,3.822,511,3.822,512,4.547,513,4.547,514,4.547,515,4.547,516,3.355,517,3.355,518,3.355,519,3.355,520,3.355]],["title/classes/SigninUserDto.html",[36,0.063,52,2.153]],["body/classes/SigninUserDto.html",[12,0.028,19,0.298,20,0.298,21,0.212,23,0.343,27,0.298,35,0.298,36,0.101,37,0.018,38,0.022,39,0.018,46,0.489,48,3.881,52,3.468,54,1.786,60,1.232,65,0.972,69,0.678,149,1.536,153,1.786,154,1.41,182,2.263,223,3.137,226,3.425,228,3.137,232,2.506,233,1.934,235,2.506,236,1.95,244,3.1,521,4.841,522,3.543,523,4.214,524,4.214]],["title/classes/UpdateUserDto.html",[36,0.063,240,1.503]],["body/classes/UpdateUserDto.html",[12,0.029,19,0.267,20,0.267,21,0.19,23,0.308,27,0.348,35,0.387,36,0.115,37,0.016,38,0.021,39,0.016,60,1.404,70,0.696,75,1.603,149,1.378,154,1.404,157,1.485,174,1.734,182,1.485,220,3.145,221,2.248,222,1.882,223,3.575,224,2.051,225,2.051,226,2.927,228,3.575,231,2.484,232,2.248,233,1.734,234,2.459,235,2.927,236,1.853,237,2.67,238,2.484,239,2.484,240,2.258,241,2.484,242,1.882,243,1.734,288,3.178]],["title/classes/User.html",[36,0.063,60,0.765]],["body/classes/User.html",[12,0.029,19,0.216,20,0.216,21,0.153,23,0.249,27,0.375,34,2.245,35,0.216,36,0.082,37,0.013,38,0.018,39,0.013,46,0.354,54,2.011,60,1.241,62,2.082,65,1.116,69,0.764,115,0.713,149,1.113,153,1.442,154,1.438,157,1.199,182,1.929,192,2.121,194,3.804,197,3.611,199,2.566,200,3.611,201,3.134,202,3.582,203,4.126,204,2.566,205,3.582,207,2.566,209,2.566,211,3.582,212,3.582,213,1.656,217,1.656,219,2.566,224,2.663,225,2.663,234,1.807,236,1.662,290,4.126,525,2.566,526,4.26,527,4.908,528,3.052,529,3.052,530,5.94,531,3.052,532,3.052,533,3.052,534,3.052,535,3.052,536,3.052,537,3.052,538,3.052,539,3.052,540,4.26,541,3.052,542,3.052,543,3.052,544,3.052,545,3.052,546,3.052,547,3.052,548,2.245,549,2.566]],["title/controllers/UserController.html",[40,1.631,550,2.153]],["body/controllers/UserController.html",[12,0.029,19,0.128,20,0.128,21,0.091,23,0.363,27,0.365,28,0.306,34,1.327,35,0.128,36,0.035,37,0.008,38,0.012,39,0.008,40,1.783,42,1.073,44,1.517,46,0.21,47,0.904,49,2.505,54,1.509,60,1.51,61,3.399,62,2.366,63,1.889,64,3.748,65,0.821,67,1.193,68,1.108,69,0.685,70,0.752,72,1.376,79,1.889,81,2.611,82,2.353,83,1.517,85,1.709,86,1.073,87,2.415,103,2.963,104,1.073,105,1.186,108,0.898,109,0.828,110,2.113,113,2.93,115,1.041,119,1.891,154,1.041,167,1.783,192,1.431,222,1.431,236,1.509,237,2.806,240,2.446,242,2.033,243,2.559,294,0.898,321,3.805,330,1.327,409,4.39,507,3.494,548,1.327,549,1.517,550,1.889,551,1.517,552,3.01,553,4.348,554,3.432,555,2.415,556,1.804,557,2.873,558,1.804,559,1.804,560,1.804,561,1.804,562,1.804,563,1.804,564,4.348,565,1.804,566,1.804,567,1.804,568,1.804,569,3.748,570,1.517,571,1.804,572,2.873,573,1.804,574,2.415,575,2.873,576,2.873,577,1.804,578,2.634,579,1.327,580,1.804,581,1.517,582,1.327,583,1.517,584,1.804,585,1.804,586,1.804,587,1.804,588,1.804,589,1.804,590,1.804,591,1.804,592,1.804,593,1.804,594,1.804,595,1.517,596,1.804,597,1.804,598,1.804,599,1.804]],["title/modules/UserModule.html",[0,1.194,15,1.777]],["body/modules/UserModule.html",[0,2.185,2,1.719,3,2.033,4,2.463,5,2.463,6,2.033,7,3.241,8,3.582,12,0.029,15,3.485,16,3.216,17,2.463,18,2.463,19,0.265,20,0.265,21,0.188,23,0.305,26,2.463,27,0.434,28,0.635,35,0.265,36,0.072,37,0.016,38,0.021,39,0.016,42,2.91,60,1.273,126,2.821,134,2.463,167,3.271,256,3.15,257,2.463,550,3.582,582,2.756,583,3.15,600,3.15,601,3.15,602,3.15,603,3.747,604,3.747,605,3.747]],["title/injectables/UserService.html",[158,0.555,167,1.631]],["body/injectables/UserService.html",[12,0.029,19,0.117,20,0.117,21,0.083,23,0.392,27,0.34,28,0.281,35,0.117,36,0.032,37,0.007,38,0.011,39,0.007,45,1.458,46,0.193,47,0.845,49,2.59,50,1.977,59,1.091,60,1.458,65,0.924,67,1.408,68,1.307,69,0.619,70,0.887,72,1.442,75,2.198,78,2.043,81,2.68,109,1.233,110,2.127,115,0.998,119,2.428,126,2.21,134,1.091,154,1.458,158,0.455,159,0.652,161,2.863,162,1.766,165,1.233,167,1.338,174,1.786,182,1.893,185,1.971,192,2.278,217,0.9,222,1.338,236,1.317,237,2.111,240,2.378,242,1.338,243,2.442,257,1.091,335,1.221,336,1.221,338,0.9,373,1.837,425,1.221,427,1.221,437,1.977,507,1.977,552,2.259,553,3.271,554,3.271,555,2.259,564,3.846,569,4.356,570,2.259,574,3.271,581,1.395,582,1.221,606,1.395,607,2.687,608,1.66,609,3.891,610,1.66,611,2.687,612,2.687,613,1.66,614,2.687,615,1.66,616,2.687,617,2.687,618,1.66,619,1.66,620,2.687,621,1.66,622,2.687,623,1.66,624,1.66,625,1.66,626,1.66,627,1.221,628,1.221,629,1.66,630,1.66,631,1.66,632,1.66,633,2.687,634,3.386,635,2.687,636,1.66,637,1.66,638,1.66,639,1.66,640,2.687,641,1.66,642,2.687,643,1.66,644,1.66,645,1.66,646,2.687,647,1.66,648,2.687,649,1.66,650,1.66,651,1.66,652,1.395,653,1.66,654,1.66]],["title/guards/ValidateBodyGuard.html",[56,1.948,353,1.631]],["body/guards/ValidateBodyGuard.html",[12,0.029,19,0.218,20,0.218,21,0.155,23,0.349,27,0.349,28,0.522,35,0.218,36,0.102,37,0.013,38,0.018,39,0.013,46,0.358,47,1.349,49,2.092,56,2.55,62,1.307,65,0.79,67,1.253,68,1.164,69,0.396,70,0.79,71,3.452,72,1.081,78,1.307,81,2.262,82,3.506,101,3.242,108,1.534,109,1.414,110,1.307,115,1.002,119,1.307,158,0.726,165,1.414,173,2.819,179,3.155,181,2.934,185,2.203,213,1.672,233,1.414,329,2.025,347,2.819,348,2.267,349,3.15,350,3.924,351,3.605,352,2.59,353,2.656,354,3.605,355,3.155,356,3.605,357,3.155,358,4.147,359,1.832,360,3.605,361,3.605,362,3.605,363,3.605,364,3.605,365,2.55,366,3.155,367,2.59,368,2.59,369,2.59,370,3.605,371,2.59,372,2.59,373,1.672,374,2.59,375,3.605,376,2.59,655,3.082,656,3.082,657,3.082]],["title/injectables/WrapResponseInterceptor.html",[158,0.555,658,2.41]],["body/injectables/WrapResponseInterceptor.html",[12,0.029,19,0.253,20,0.253,21,0.18,23,0.291,27,0.417,28,0.606,35,0.253,36,0.091,37,0.015,38,0.02,39,0.015,46,0.416,47,1.494,65,0.659,67,1.046,68,0.972,69,0.46,70,0.659,72,0.902,92,3.375,115,0.836,158,0.804,159,1.407,185,1.407,213,1.942,349,3.079,359,2.129,365,2.129,462,3.992,467,3.992,472,3.992,473,3.92,474,4.771,476,4.48,479,3.992,483,2.634,485,3.009,486,3.009,510,4.48,658,3.494,659,3.992,660,3.009,661,4.749,662,4.749,663,5.329,664,4.749,665,3.58,666,3.58,667,3.009,668,3.58,669,3.58,670,3.58,671,3.58,672,3.58,673,3.58,674,3.992,675,3.58,676,3.009,677,3.58]],["title/coverage.html",[678,3.761]],["body/coverage.html",[6,1.468,12,0.029,21,0.136,36,0.116,37,0.011,38,0.017,39,0.011,40,1.947,41,1.778,43,2.274,52,1.778,56,1.609,60,0.632,69,0.348,73,1.609,75,1.147,78,1.147,85,1.609,86,2.325,89,1.347,95,1.99,98,1.778,101,2.57,103,1.609,104,2.325,124,1.609,125,1.609,126,1.241,150,2.274,151,2.274,158,1.013,160,2.274,167,1.347,194,1.778,195,2.274,220,1.468,221,2.992,240,1.241,243,1.241,249,1.778,250,1.99,258,1.99,260,1.99,262,1.99,294,1.947,295,1.778,297,3.307,309,2.57,319,1.778,347,1.778,348,2.877,353,1.347,377,2.877,388,1.99,389,2.877,399,2.274,400,2.274,421,2.274,428,2.274,429,2.274,438,2.274,459,1.99,460,2.274,461,2.274,493,1.99,494,2.274,495,2.274,506,2.274,521,2.274,522,2.274,525,2.274,550,1.778,551,2.274,578,1.99,579,1.99,606,2.274,627,1.99,628,1.99,658,1.99,659,2.274,660,2.274,676,4.821,678,2.274,679,2.705,680,2.705,681,2.705,682,6.076,683,2.705,684,2.705,685,2.705,686,4.592,687,4.592,688,5.031,689,5.031,690,5.031,691,5.031,692,2.705,693,5.872,694,5.872,695,3.287,696,2.705,697,2.274,698,5.031,699,2.705,700,2.705,701,2.705,702,2.705,703,2.274,704,2.274,705,2.274,706,2.274,707,2.274,708,2.705,709,2.705,710,2.705,711,2.705,712,2.705,713,2.705,714,2.705,715,2.705,716,2.705]],["title/dependencies.html",[3,2.138,717,2.299]],["body/dependencies.html",[3,2.193,12,0.029,28,0.684,36,0.098,37,0.017,38,0.022,39,0.017,129,2.656,131,2.973,133,2.193,152,2.403,157,1.588,213,2.193,217,2.193,233,1.855,248,2.973,257,2.656,306,2.656,401,4.156,422,2.656,455,3.398,483,2.973,667,4.32,718,4.042,719,4.042,720,5.649,721,4.042,722,4.042,723,5.138,724,4.042,725,4.042,726,4.042,727,4.042,728,4.042,729,4.042,730,4.042,731,4.042,732,4.042,733,4.042,734,4.042,735,4.042,736,4.042,737,3.398,738,4.042,739,4.042,740,4.042,741,4.042,742,4.042,743,4.042,744,4.042]],["title/miscellaneous/functions.html",[745,1.797,746,3.313]],["body/miscellaneous/functions.html",[6,3.271,12,0.027,23,0.381,37,0.02,38,0.024,39,0.02,46,0.543,67,1.366,68,1.269,70,0.861,187,3.439,197,4.136,309,3.072,329,3.072,338,2.536,396,3.439,437,3.439,627,4.136,628,3.439,703,4.726,707,3.929,745,3.072,746,3.929,747,4.674,748,4.674,749,4.674,750,4.674,751,3.929,752,4.674]],["title/index.html",[46,0.318,753,2.299,754,2.299]],["body/index.html",[12,0.027,21,0.107,23,0.174,24,2.758,25,1.797,37,0.009,38,0.014,39,0.009,59,1.405,77,3.294,174,1.505,217,1.78,222,2.23,242,1.064,276,3.356,278,1.797,281,1.405,282,3.356,307,1.405,314,2.937,357,3.554,422,1.405,473,1.573,498,1.797,511,2.758,548,1.573,595,1.797,652,3.765,717,1.797,751,1.797,753,1.797,754,1.797,755,2.138,756,3.993,757,5.992,758,5.617,759,4.478,760,3.993,761,3.993,762,3.281,763,4.831,764,2.138,765,5.833,766,3.281,767,2.138,768,3.281,769,2.138,770,2.138,771,3.281,772,2.138,773,4.831,774,3.281,775,3.281,776,2.138,777,2.138,778,2.138,779,2.138,780,3.993,781,2.138,782,5.098,783,5.098,784,4.061,785,3.993,786,5.617,787,3.993,788,4.831,789,4.831,790,5.098,791,3.281,792,2.138,793,2.138,794,4.478,795,2.138,796,3.993,797,4.831,798,3.765,799,4.478,800,2.138,801,2.138,802,3.993,803,4.478,804,2.138,805,2.138,806,2.138,807,2.138,808,2.138,809,2.138,810,2.138,811,3.281,812,4.478,813,3.993,814,2.138,815,2.138,816,2.138,817,2.138,818,3.993,819,2.138,820,2.138,821,2.138,822,2.138,823,2.138,824,2.138,825,2.138,826,2.138,827,2.138,828,2.138,829,2.138,830,2.138,831,3.281,832,2.138,833,2.138,834,3.993,835,3.993,836,3.281,837,2.138,838,2.138,839,2.138,840,2.138,841,2.138,842,3.281,843,3.281,844,2.138,845,2.138,846,1.797,847,3.281,848,3.993,849,2.138,850,2.138,851,5.309,852,2.138,853,2.138,854,2.138,855,2.138,856,2.138,857,2.138,858,3.281,859,2.138,860,2.138,861,2.138,862,3.993,863,2.138,864,3.993,865,2.138,866,2.138,867,2.138,868,2.138,869,2.138,870,2.138,871,2.138,872,2.138,873,2.138,874,3.281,875,2.138,876,2.138,877,2.138,878,2.138,879,2.138,880,2.138,881,2.138,882,2.138,883,2.138,884,3.281,885,2.138,886,2.138,887,2.138,888,2.138,889,2.138,890,2.138,891,2.138,892,2.138,893,2.138,894,2.138,895,2.138]],["title/modules.html",[2,2.053]],["body/modules.html",[1,3.164,2,2.209,11,2.863,12,0.024,13,2.863,14,2.863,15,2.612,37,0.02,38,0.024,39,0.02,784,5.133,896,6.106,897,6.106,898,6.452,899,5.722,900,5.722]],["title/overview.html",[901,3.761]],["body/overview.html",[0,1.362,1,4.257,2,1.714,3,2.027,4,2.456,5,2.456,6,2.027,7,2.222,8,2.456,9,3.141,10,3.141,11,3.926,12,0.028,13,3.236,14,3.236,15,3.483,16,3.21,17,2.456,18,2.456,37,0.016,38,0.021,39,0.016,42,2.222,89,2.71,121,3.141,123,3.141,124,3.236,125,3.236,126,2.648,149,1.362,159,1.468,167,3.116,296,2.748,353,1.86,453,3.141,600,3.141,601,3.141,602,3.141,846,4.106,901,3.141,902,3.736,903,3.736,904,3.736]],["title/miscellaneous/variables.html",[745,1.797,905,3.313]],["body/miscellaneous/variables.html",[12,0.029,23,0.477,37,0.011,38,0.016,39,0.011,40,1.237,46,0.289,54,1.244,60,0.58,61,2.416,62,1.054,63,2.874,68,0.675,69,0.621,71,2.601,79,2.416,85,2.186,86,1.478,95,2.704,103,2.186,104,1.478,105,1.633,106,2.416,113,2.874,115,1.021,154,0.58,185,1.718,198,1.828,236,0.841,258,2.704,260,2.704,262,2.704,269,2.089,271,3.676,273,2.089,281,1.633,295,1.633,297,3.176,300,2.089,302,2.089,304,2.089,305,3.555,306,2.416,307,2.416,310,1.828,311,2.089,312,2.089,313,2.089,314,1.828,315,2.089,316,2.089,317,2.089,318,2.704,319,1.633,320,3.676,321,3.217,323,2.089,325,2.089,330,3.217,331,3.676,333,2.089,334,2.089,335,1.828,336,1.828,337,2.089,338,1.348,339,2.089,340,2.089,341,2.089,342,3.09,343,2.089,344,2.089,345,2.089,346,2.089,349,1.348,355,1.828,388,3.217,389,1.828,409,1.828,451,3.769,452,3.769,497,3.09,578,2.704,579,1.828,674,2.089,695,3.676,697,3.09,704,2.089,705,2.089,706,2.089,737,2.089,745,1.633,798,2.089,905,2.089,906,2.485,907,2.485,908,2.485,909,2.485,910,3.675,911,2.485,912,2.485,913,2.485,914,2.485,915,2.485,916,2.485,917,2.485,918,2.485,919,2.485,920,2.485,921,2.485,922,2.485,923,5.586,924,3.675,925,2.485,926,2.485,927,2.485,928,2.485,929,2.485,930,2.485,931,2.485,932,2.485,933,2.485,934,2.485,935,2.485,936,2.485,937,2.485,938,2.485,939,2.485,940,2.485,941,2.485,942,2.485,943,2.485,944,2.485,945,2.485,946,2.485,947,2.485]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"classes/CreateUserDto.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":676,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{},"coverage.html":{}}}],["0.1.13",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["0.2.30",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["0.6.3",{"_index":721,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":692,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":708,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":696,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":904,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":694,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":687,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":689,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":691,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":712,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":453,"title":{},"body":{"injectables/PasswordService.html":{},"overview.html":{}}}],["100",{"_index":682,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["17.1.1",{"_index":719,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":846,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2/3",{"_index":700,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":709,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":690,"title":{},"body":{"coverage.html":{}}}],["3.0.2",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":683,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":688,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["4.7.12",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":902,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":685,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":686,"title":{},"body":{"coverage.html":{}}}],["5000",{"_index":477,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["5000ms",{"_index":465,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["6.6.3",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["7.1.5",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":722,"title":{},"body":{"dependencies.html":{}}}],["7.5.1",{"_index":720,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["8.2.0",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["8/9",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":684,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":903,"title":{},"body":{"overview.html":{}}}],["__dirname}/**/*.entity",{"_index":287,"title":{},"body":{"modules/ConfigModule.html":{}}}],["_createauthresponse",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["_createauthresponse(user",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["abstract",{"_index":218,"title":{},"body":{"classes/BaseEntity.html":{}}}],["accepted",{"_index":320,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"miscellaneous/variables.html":{}}}],["accepted.isarray",{"_index":346,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"miscellaneous/variables.html":{}}}],["accepted.type",{"_index":345,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"miscellaneous/variables.html":{}}}],["access",{"_index":839,"title":{},"body":{"index.html":{}}}],["accessors",{"_index":526,"title":{},"body":{"classes/User.html":{}}}],["according",{"_index":806,"title":{},"body":{"index.html":{}}}],["actions",{"_index":822,"title":{},"body":{"index.html":{}}}],["actually",{"_index":891,"title":{},"body":{"index.html":{}}}],["add",{"_index":548,"title":{},"body":{"classes/User.html":{},"controllers/UserController.html":{},"index.html":{}}}],["added",{"_index":810,"title":{},"body":{"index.html":{}}}],["adds",{"_index":662,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{}}}],["alrady",{"_index":809,"title":{},"body":{"index.html":{}}}],["already",{"_index":335,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["apiacceptedresponse",{"_index":323,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"miscellaneous/variables.html":{}}}],["apibadrequestresponse",{"_index":300,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":301,"title":{},"body":{"interfaces/IApiDocOptions.html":{}}}],["apiconflictresponse",{"_index":324,"title":{},"body":{"interfaces/IRoteDocOptions.html":{}}}],["apicreatedresponse",{"_index":325,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"miscellaneous/variables.html":{}}}],["apidoc",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IApiDocOptions.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apihideproperty",{"_index":211,"title":{},"body":{"classes/BaseEntity.html":{},"classes/User.html":{}}}],["apihideproperty()@exclude({toplainonly",{"_index":203,"title":{},"body":{"classes/BaseEntity.html":{},"classes/User.html":{}}}],["apiinternalservererrorresponse",{"_index":302,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"miscellaneous/variables.html":{}}}],["apinotfoundresponse",{"_index":326,"title":{},"body":{"interfaces/IRoteDocOptions.html":{}}}],["apiokresponse",{"_index":327,"title":{},"body":{"interfaces/IRoteDocOptions.html":{}}}],["apioperation",{"_index":328,"title":{},"body":{"interfaces/IRoteDocOptions.html":{}}}],["apiresponseproperty",{"_index":155,"title":{},"body":{"classes/AuthResponse.html":{}}}],["apitags",{"_index":303,"title":{},"body":{"interfaces/IApiDocOptions.html":{}}}],["apitags(tag",{"_index":311,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"miscellaneous/variables.html":{}}}],["apiunauthorizedresponse",{"_index":304,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app.config",{"_index":259,"title":{},"body":{"modules/ConfigModule.html":{}}}],["app_guard",{"_index":247,"title":{},"body":{"modules/CommonModule.html":{}}}],["appconfig",{"_index":258,"title":{},"body":{"modules/ConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["applied",{"_index":873,"title":{},"body":{"index.html":{}}}],["applydecorators",{"_index":299,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{}}}],["applydecorators(...decorators",{"_index":318,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps",{"_index":761,"title":{},"body":{"index.html":{}}}],["arguments",{"_index":398,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["async",{"_index":49,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IValidateClass.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"classes/SchemaSync1614798846236.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{}}}],["auth",{"_index":45,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponse.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/UserService.html":{}}}],["auth.controller",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"modules/CommonModule.html":{}}}],["auth.guard.ts",{"_index":377,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:10",{"_index":381,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:13",{"_index":424,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["auth.guard.ts:15",{"_index":382,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:26",{"_index":384,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:8",{"_index":423,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["auth.service",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth.stategy",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.stategy.ts",{"_index":400,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["auth.stategy.ts:11",{"_index":404,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth.stategy.ts:20",{"_index":407,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth.strategy",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.strategy.ts",{"_index":429,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["auth.strategy.ts:11",{"_index":431,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["auth.strategy.ts:16",{"_index":433,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":41,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authed",{"_index":947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authguard",{"_index":387,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":390,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":426,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authorized",{"_index":574,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["authresponse",{"_index":73,"title":{"classes/AuthResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthResponse.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authservice",{"_index":89,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":284,"title":{},"body":{"modules/ConfigModule.html":{}}}],["automatically",{"_index":874,"title":{},"body":{"index.html":{}}}],["available",{"_index":900,"title":{},"body":{"modules.html":{}}}],["avoid",{"_index":854,"title":{},"body":{"index.html":{}}}],["await",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IValidateClass.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"classes/SchemaSync1614798846236.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{}}}],["backend",{"_index":763,"title":{},"body":{"index.html":{}}}],["bad",{"_index":312,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"miscellaneous/variables.html":{}}}],["badrequestexception",{"_index":351,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["base",{"_index":196,"title":{},"body":{"classes/BaseEntity.html":{}}}],["based",{"_index":397,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["baseentity",{"_index":194,"title":{"classes/BaseEntity.html":{}},"body":{"classes/BaseEntity.html":{},"classes/User.html":{},"coverage.html":{}}}],["baseentity:10",{"_index":536,"title":{},"body":{"classes/User.html":{}}}],["baseentity:15",{"_index":535,"title":{},"body":{"classes/User.html":{}}}],["baseentity:20",{"_index":537,"title":{},"body":{"classes/User.html":{}}}],["bash",{"_index":791,"title":{},"body":{"index.html":{}}}],["basic",{"_index":222,"title":{},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["basicuserdto",{"_index":220,"title":{"classes/BasicUserDto.html":{}},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["basicuserdto:11",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["basicuserdto:14",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["basicuserdto:8",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["bcrypt",{"_index":455,"title":{},"body":{"injectables/PasswordService.html":{},"dependencies.html":{}}}],["bcrypt.compare(plainpass",{"_index":458,"title":{},"body":{"injectables/PasswordService.html":{}}}],["bcrypt.hash(plainpass",{"_index":456,"title":{},"body":{"injectables/PasswordService.html":{}}}],["before",{"_index":357,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{},"index.html":{}}}],["body",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"classes/IValidateClass.html":{},"controllers/UserController.html":{},"guards/ValidateBodyGuard.html":{}}}],["body.guard",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.guard.ts",{"_index":348,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{},"coverage.html":{}}}],["body.guard.ts:12",{"_index":656,"title":{},"body":{"guards/ValidateBodyGuard.html":{}}}],["body.guard.ts:20",{"_index":657,"title":{},"body":{"guards/ValidateBodyGuard.html":{}}}],["bodyclass",{"_index":368,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["boolean",{"_index":298,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":898,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":896,"title":{},"body":{"modules.html":{}}}],["build",{"_index":858,"title":{},"body":{"index.html":{}}}],["building",{"_index":760,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":474,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["canactivate",{"_index":350,"title":{},"body":{"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"guards/ValidateBodyGuard.html":{}}}],["canactivate(context",{"_index":366,"title":{},"body":{"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"guards/ValidateBodyGuard.html":{}}}],["cases",{"_index":354,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["catcherror",{"_index":484,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["catcherror((err",{"_index":489,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["change",{"_index":242,"title":{},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["changepassworddto",{"_index":243,"title":{"classes/ChangePasswordDto.html":{}},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["changepassworddto.password",{"_index":649,"title":{},"body":{"injectables/UserService.html":{}}}],["changeuserpassword",{"_index":552,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["changeuserpassword(user",{"_index":556,"title":{},"body":{"controllers/UserController.html":{}}}],["changeuserpassword(userid",{"_index":612,"title":{},"body":{"injectables/UserService.html":{}}}],["character",{"_index":514,"title":{},"body":{"classes/SchemaSync1614798846236.html":{}}}],["check",{"_index":803,"title":{},"body":{"index.html":{}}}],["checks",{"_index":751,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["chmod",{"_index":842,"title":{},"body":{"index.html":{}}}],["class",{"_index":36,"title":{"classes/AuthResponse.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/IValidateClass.html":{},"classes/SchemaSync1614798846236.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"classes/CreateUserDto.html":{},"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":149,"title":{},"body":{"classes/AuthResponse.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/IValidateClass.html":{},"classes/SchemaSync1614798846236.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["classtoplain",{"_index":666,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{}}}],["classtoplain(data",{"_index":677,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{}}}],["cli",{"_index":878,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":600,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":601,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":602,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":664,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{}}}],["column",{"_index":530,"title":{},"body":{"classes/User.html":{}}}],["column({unique",{"_index":528,"title":{},"body":{"classes/User.html":{}}}],["columns",{"_index":199,"title":{},"body":{"classes/BaseEntity.html":{},"classes/User.html":{}}}],["command",{"_index":793,"title":{},"body":{"index.html":{}}}],["commands",{"_index":850,"title":{},"body":{"index.html":{}}}],["commit",{"_index":786,"title":{},"body":{"index.html":{}}}],["commits",{"_index":789,"title":{},"body":{"index.html":{}}}],["common",{"_index":198,"title":{},"body":{"classes/BaseEntity.html":{},"interfaces/IRoteDocOptions.html":{},"miscellaneous/variables.html":{}}}],["common/common.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["common/decorators/public",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["commonmodule",{"_index":13,"title":{"modules/CommonModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules.html":{},"overview.html":{}}}],["compare",{"_index":445,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparepassword",{"_index":440,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparepassword(hash",{"_index":442,"title":{},"body":{"injectables/PasswordService.html":{}}}],["compose",{"_index":790,"title":{},"body":{"index.html":{}}}],["config",{"_index":254,"title":{},"body":{"modules/ConfigModule.html":{}}}],["config/config.module",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":14,"title":{"modules/ConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["configs",{"_index":773,"title":{},"body":{"index.html":{}}}],["configservice",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('app.jwtexpires",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('app.jwtsecret",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('app.nodeenv",{"_index":279,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('database.host",{"_index":270,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('database.name",{"_index":277,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('database.password",{"_index":275,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('database.port",{"_index":272,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('database.username",{"_index":274,"title":{},"body":{"modules/ConfigModule.html":{}}}],["conflict",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IRoteDocOptions.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["conflictexception",{"_index":625,"title":{},"body":{"injectables/UserService.html":{}}}],["conflictexception('new",{"_index":650,"title":{},"body":{"injectables/UserService.html":{}}}],["conflictexception('user",{"_index":637,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constraint",{"_index":516,"title":{},"body":{"classes/SchemaSync1614798846236.html":{}}}],["constructor",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{}}}],["constructor(authservice",{"_index":430,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":403,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(customtimeout",{"_index":468,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["constructor(private",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"controllers/UserController.html":{},"guards/ValidateBodyGuard.html":{}}}],["constructor(readonly",{"_index":414,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(reflector",{"_index":379,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(userrepository",{"_index":608,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(validateclass",{"_index":655,"title":{},"body":{"guards/ValidateBodyGuard.html":{}}}],["container",{"_index":862,"title":{},"body":{"index.html":{}}}],["containers",{"_index":765,"title":{},"body":{"index.html":{}}}],["context",{"_index":365,"title":{},"body":{"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["context.getclass",{"_index":394,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":393,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":367,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["context.switchtohttp().getresponse",{"_index":669,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{}}}],["controller",{"_index":40,"title":{"controllers/AuthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/IApiDocOptions.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["controller('auth",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":584,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":42,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["conventional",{"_index":788,"title":{},"body":{"index.html":{}}}],["corresponds",{"_index":827,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":678,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/SchemaSync1614798846236.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"index.html":{}}}],["create(createuserdto",{"_index":614,"title":{},"body":{"injectables/UserService.html":{}}}],["created",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IRoteDocOptions.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["created.isarray",{"_index":344,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"miscellaneous/variables.html":{}}}],["created.type",{"_index":343,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":200,"title":{},"body":{"classes/BaseEntity.html":{},"classes/SchemaSync1614798846236.html":{},"classes/User.html":{}}}],["createdatecolumn",{"_index":214,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createparamdecorator",{"_index":941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuserdto",{"_index":75,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":636,"title":{},"body":{"injectables/UserService.html":{}}}],["createvalidationschema",{"_index":262,"title":{},"body":{"modules/ConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["creating",{"_index":771,"title":{},"body":{"index.html":{}}}],["ctx",{"_index":943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customtimeout",{"_index":470,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["d",{"_index":865,"title":{},"body":{"index.html":{}}}],["data",{"_index":674,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["data.length",{"_index":675,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{}}}],["database",{"_index":276,"title":{},"body":{"modules/ConfigModule.html":{},"index.html":{}}}],["database.config",{"_index":261,"title":{},"body":{"modules/ConfigModule.html":{}}}],["databaseconfig",{"_index":260,"title":{},"body":{"modules/ConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":202,"title":{},"body":{"classes/BaseEntity.html":{},"classes/User.html":{}}}],["date.now",{"_index":672,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{}}}],["dbuser",{"_index":644,"title":{},"body":{"injectables/UserService.html":{}}}],["dbuser.password",{"_index":648,"title":{},"body":{"injectables/UserService.html":{}}}],["decides",{"_index":363,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorator",{"_index":305,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponse.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"classes/SigninUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["decorators.push",{"_index":342,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"miscellaneous/variables.html":{}}}],["decorators.push(apibearerauth",{"_index":316,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"miscellaneous/variables.html":{}}}],["decorators.push(apiconflictresponse",{"_index":334,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"miscellaneous/variables.html":{}}}],["decorators.push(apinotfoundresponse",{"_index":337,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"miscellaneous/variables.html":{}}}],["decorators.push(apiokresponse",{"_index":339,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"miscellaneous/variables.html":{}}}],["decorators.push(apioperation",{"_index":333,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"miscellaneous/variables.html":{}}}],["default",{"_index":451,"title":{},"body":{"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":464,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["defaulttimeoutms",{"_index":466,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["defined",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"classes/SigninUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["delete",{"_index":553,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete()@routedoc({operation",{"_index":561,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(@userfromrequest",{"_index":591,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(user",{"_index":560,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(userid",{"_index":617,"title":{},"body":{"injectables/UserService.html":{}}}],["demands",{"_index":895,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":544,"title":{},"body":{"classes/User.html":{}}}],["description",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"modules/ConfigModule.html":{},"classes/CreateUserDto.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["detached",{"_index":863,"title":{},"body":{"index.html":{}}}],["details",{"_index":572,"title":{},"body":{"controllers/UserController.html":{}}}],["dev",{"_index":872,"title":{},"body":{"index.html":{}}}],["developers",{"_index":768,"title":{},"body":{"index.html":{}}}],["development",{"_index":280,"title":{},"body":{"modules/ConfigModule.html":{}}}],["development/production",{"_index":779,"title":{},"body":{"index.html":{}}}],["differ",{"_index":651,"title":{},"body":{"injectables/UserService.html":{}}}],["doc.decorator",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["doc.decorator.ts",{"_index":297,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["docker",{"_index":757,"title":{},"body":{"index.html":{}}}],["docs",{"_index":307,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["documentation",{"_index":679,"title":{},"body":{"coverage.html":{}}}],["dome",{"_index":356,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["done",{"_index":882,"title":{},"body":{"index.html":{}}}],["dotenv",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["down",{"_index":498,"title":{},"body":{"classes/SchemaSync1614798846236.html":{},"index.html":{}}}],["down(queryrunner",{"_index":500,"title":{},"body":{"classes/SchemaSync1614798846236.html":{}}}],["dto",{"_index":223,"title":{},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["dto/auth",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/signin",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/user.dto",{"_index":581,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e.g",{"_index":823,"title":{},"body":{"index.html":{}}}],["email",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["entities",{"_index":286,"title":{},"body":{"modules/ConfigModule.html":{}}}],["entity",{"_index":197,"title":{},"body":{"classes/BaseEntity.html":{},"classes/User.html":{},"miscellaneous/functions.html":{}}}],["entity('users",{"_index":542,"title":{},"body":{"classes/User.html":{}}}],["entity/user.entity",{"_index":582,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["env",{"_index":802,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":804,"title":{},"body":{"index.html":{}}}],["environments",{"_index":777,"title":{},"body":{"index.html":{}}}],["envs",{"_index":798,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":385,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/ResponseTimeoutInterceptor.html":{}}}],["errmsg",{"_index":375,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["error",{"_index":315,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":817,"title":{},"body":{"index.html":{}}}],["eslint",{"_index":813,"title":{},"body":{"index.html":{}}}],["everything",{"_index":847,"title":{},"body":{"index.html":{}}}],["example",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["examples(module+service+controller+entity",{"_index":781,"title":{},"body":{"index.html":{}}}],["exception",{"_index":396,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"miscellaneous/functions.html":{}}}],["exclude",{"_index":212,"title":{},"body":{"classes/BaseEntity.html":{},"classes/User.html":{}}}],["executioncontext",{"_index":349,"title":{},"body":{"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["existing",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["existinguser",{"_index":635,"title":{},"body":{"injectables/UserService.html":{}}}],["exists",{"_index":336,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"classes/CreateUserDto.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["expose",{"_index":540,"title":{},"body":{"classes/User.html":{}}}],["express",{"_index":667,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{},"dependencies.html":{}}}],["extends",{"_index":234,"title":{},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["extract",{"_index":946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":410,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":416,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["f",{"_index":866,"title":{},"body":{"index.html":{}}}],["fails",{"_index":814,"title":{},"body":{"index.html":{}}}],["false",{"_index":310,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["feel",{"_index":889,"title":{},"body":{"index.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"classes/CreateUserDto.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":840,"title":{},"body":{"index.html":{}}}],["find",{"_index":564,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall",{"_index":554,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone",{"_index":555,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('userid",{"_index":587,"title":{},"body":{"controllers/UserController.html":{}}}],["findone(id",{"_index":620,"title":{},"body":{"injectables/UserService.html":{}}}],["findone(userid",{"_index":566,"title":{},"body":{"controllers/UserController.html":{}}}],["findonebyemail",{"_index":607,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyemail(email",{"_index":622,"title":{},"body":{"injectables/UserService.html":{}}}],["first",{"_index":852,"title":{},"body":{"index.html":{}}}],["firstname",{"_index":224,"title":{},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/SchemaSync1614798846236.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["fisrt",{"_index":853,"title":{},"body":{"index.html":{}}}],["fit",{"_index":893,"title":{},"body":{"index.html":{}}}],["found",{"_index":338,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["found.utls",{"_index":629,"title":{},"body":{"injectables/UserService.html":{}}}],["found.utls.ts",{"_index":703,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["free",{"_index":890,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":825,"title":{},"body":{"index.html":{}}}],["fullname",{"_index":527,"title":{},"body":{"classes/User.html":{}}}],["function",{"_index":309,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":746,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":880,"title":{},"body":{"index.html":{}}}],["generated",{"_index":877,"title":{},"body":{"index.html":{}}}],["generic",{"_index":750,"title":{},"body":{"miscellaneous/functions.html":{}}}],["get(':userid",{"_index":586,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':userid')@routedoc({operation",{"_index":567,"title":{},"body":{"controllers/UserController.html":{}}}],["get()@routedoc({operation",{"_index":563,"title":{},"body":{"controllers/UserController.html":{}}}],["getfullname",{"_index":538,"title":{},"body":{"classes/User.html":{}}}],["getting",{"_index":753,"title":{"index.html":{}},"body":{"index.html":{}}}],["git",{"_index":782,"title":{},"body":{"index.html":{}}}],["give",{"_index":838,"title":{},"body":{"index.html":{}}}],["global",{"_index":837,"title":{},"body":{"index.html":{}}}],["graph",{"_index":899,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":353,"title":{"guards/ValidateBodyGuard.html":{}},"body":{"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/ValidateBodyGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":358,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["guards/local",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["handlerequest",{"_index":378,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["handlerequest(err",{"_index":383,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["handlers",{"_index":599,"title":{},"body":{"controllers/UserController.html":{}}}],["hapi/joi",{"_index":718,"title":{},"body":{"dependencies.html":{}}}],["happen",{"_index":816,"title":{},"body":{"index.html":{}}}],["hash",{"_index":447,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hashpassword",{"_index":441,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hashpassword(plainpass",{"_index":448,"title":{},"body":{"injectables/PasswordService.html":{}}}],["helper",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["here",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["hook",{"_index":811,"title":{},"body":{"index.html":{}}}],["hooks",{"_index":783,"title":{},"body":{"index.html":{}}}],["hooks/commit",{"_index":844,"title":{},"body":{"index.html":{}}}],["hooks/pre",{"_index":845,"title":{},"body":{"index.html":{}}}],["host",{"_index":269,"title":{},"body":{"modules/ConfigModule.html":{},"miscellaneous/variables.html":{}}}],["iapidocoptions",{"_index":295,"title":{"interfaces/IApiDocOptions.html":{}},"body":{"interfaces/IApiDocOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"injectables/JwtStrategy.html":{},"classes/SchemaSync1614798846236.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["ide",{"_index":857,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":680,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":417,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ijwtpayload",{"_index":406,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ijwtuser",{"_index":409,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":359,"title":{},"body":{"classes/IValidateClass.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["import",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"classes/CreateUserDto.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["imports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":46,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"classes/SigninUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"classes/CreateUserDto.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["inherited",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["inject",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{},"modules/ConfigModule.html":{}}}],["injectable",{"_index":158,"title":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"injectables/UserService.html":{},"injectables/WrapResponseInterceptor.html":{}},"body":{"injectables/AuthService.html":{},"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{},"coverage.html":{}}}],["injectables",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"injectables/UserService.html":{},"injectables/WrapResponseInterceptor.html":{},"overview.html":{}}}],["injectrepository",{"_index":626,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(user",{"_index":630,"title":{},"body":{"injectables/UserService.html":{}}}],["inside",{"_index":776,"title":{},"body":{"index.html":{}}}],["install",{"_index":835,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":490,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["instead",{"_index":285,"title":{},"body":{"modules/ConfigModule.html":{}}}],["intercept",{"_index":467,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["intercept(context",{"_index":472,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["interceptor",{"_index":462,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["interface",{"_index":294,"title":{"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{}},"body":{"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["interfaces",{"_index":296,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"overview.html":{}}}],["interfaces/jwt",{"_index":412,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["internal",{"_index":313,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"miscellaneous/variables.html":{}}}],["irotedocoptions",{"_index":319,"title":{"interfaces/IRoteDocOptions.html":{}},"body":{"interfaces/IRoteDocOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["iroutedocoptions",{"_index":332,"title":{},"body":{"interfaces/IRoteDocOptions.html":{}}}],["is_public_route",{"_index":388,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":330,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["isemail",{"_index":226,"title":{},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isglobal",{"_index":265,"title":{},"body":{"modules/ConfigModule.html":{}}}],["ispassequal",{"_index":646,"title":{},"body":{"injectables/UserService.html":{}}}],["ispasswordmatch",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispublic",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IApiDocOptions.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":228,"title":{},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@minlength(6",{"_index":244,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/SigninUserDto.html":{}}}],["it's",{"_index":830,"title":{},"body":{"index.html":{}}}],["ivalidateclass",{"_index":347,"title":{"classes/IValidateClass.html":{}},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{},"coverage.html":{}}}],["jwt",{"_index":152,"title":{},"body":{"classes/AuthResponse.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_expires",{"_index":926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":249,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/CommonModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtexpires",{"_index":919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":415,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtsecret",{"_index":917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtservice",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":124,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":519,"title":{},"body":{"classes/SchemaSync1614798846236.html":{}}}],["lastname",{"_index":225,"title":{},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/SchemaSync1614798846236.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["launch",{"_index":794,"title":{},"body":{"index.html":{}}}],["launched",{"_index":362,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["launching",{"_index":879,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":673,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{}}}],["line",{"_index":849,"title":{},"body":{"index.html":{}}}],["literal",{"_index":322,"title":{},"body":{"interfaces/IRoteDocOptions.html":{}}}],["load",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{}}}],["local",{"_index":422,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["localauthguard",{"_index":98,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localauthguard)@post('signin')@routedoc({operation",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{}}}],["localstrategy",{"_index":125,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logging",{"_index":283,"title":{},"body":{"modules/ConfigModule.html":{}}}],["logs",{"_index":818,"title":{},"body":{"index.html":{}}}],["lot",{"_index":887,"title":{},"body":{"index.html":{}}}],["main",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["make",{"_index":595,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["manually",{"_index":881,"title":{},"body":{"index.html":{}}}],["map",{"_index":668,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{}}}],["map((data",{"_index":670,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{}}}],["marked",{"_index":239,"title":{},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["matching",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"classes/CreateUserDto.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":826,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":737,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"classes/IValidateClass.html":{},"injectables/PasswordService.html":{},"guards/ValidateBodyGuard.html":{}}}],["methods",{"_index":47,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["migrationinterface",{"_index":496,"title":{},"body":{"classes/SchemaSync1614798846236.html":{}}}],["migrations",{"_index":796,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":232,"title":{},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(6",{"_index":235,"title":{},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["miscellaneous",{"_index":745,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":864,"title":{},"body":{"index.html":{}}}],["modegit",{"_index":808,"title":{},"body":{"index.html":{}}}],["modify",{"_index":831,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":549,"title":{},"body":{"classes/User.html":{},"controllers/UserController.html":{}}}],["msg",{"_index":787,"title":{},"body":{"index.html":{}}}],["name",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":805,"title":{},"body":{"index.html":{}}}],["need",{"_index":799,"title":{},"body":{"index.html":{}}}],["needed",{"_index":833,"title":{},"body":{"index.html":{}}}],["nest",{"_index":875,"title":{},"body":{"index.html":{}}}],["nest.js",{"_index":762,"title":{},"body":{"index.html":{}}}],["nestconfigmodule",{"_index":255,"title":{},"body":{"modules/ConfigModule.html":{}}}],["nestconfigmodule.forroot",{"_index":264,"title":{},"body":{"modules/ConfigModule.html":{}}}],["nestinterceptor",{"_index":479,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["nestjs",{"_index":755,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":248,"title":{},"body":{"modules/CommonModule.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":157,"title":{},"body":{"classes/AuthResponse.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":257,"title":{},"body":{"modules/ConfigModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"coverage.html":{}}}],["next",{"_index":473,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{},"index.html":{}}}],["next.handle().pipe",{"_index":486,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["node_env",{"_index":922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nodeenv",{"_index":915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["note",{"_index":834,"title":{},"body":{"index.html":{}}}],["notfound",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IRoteDocOptions.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":425,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["notfoundexception('user",{"_index":427,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["now",{"_index":513,"title":{},"body":{"classes/SchemaSync1614798846236.html":{}}}],["npm",{"_index":836,"title":{},"body":{"index.html":{}}}],["null",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"classes/SchemaSync1614798846236.html":{},"miscellaneous/functions.html":{}}}],["number",{"_index":450,"title":{},"body":{"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{}}}],["number().required",{"_index":924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.values(err.constraints",{"_index":376,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["observable",{"_index":476,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["ok",{"_index":321,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["ok.isarray",{"_index":341,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"miscellaneous/variables.html":{}}}],["ok.type",{"_index":340,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"miscellaneous/variables.html":{}}}],["one",{"_index":652,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["operation",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IRoteDocOptions.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["optional",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":308,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{}}}],["orderby",{"_index":543,"title":{},"body":{"classes/User.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["output",{"_index":819,"title":{},"body":{"index.html":{}}}],["overview",{"_index":901,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":717,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["param",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"classes/IValidateClass.html":{},"injectables/PasswordService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{}}}],["parameters",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{},"miscellaneous/functions.html":{}}}],["parseint(process.env.port",{"_index":914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.postgres_port",{"_index":934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseuuidpipe",{"_index":575,"title":{},"body":{"controllers/UserController.html":{}}}],["partialtype",{"_index":231,"title":{},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(basicuserdto",{"_index":241,"title":{},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["pass",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["passport",{"_index":401,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":411,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":413,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":236,"title":{},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"modules/ConfigModule.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["password')@routedoc({operation",{"_index":558,"title":{},"body":{"controllers/UserController.html":{}}}],["passwordfield",{"_index":435,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passwords",{"_index":446,"title":{},"body":{"injectables/PasswordService.html":{}}}],["passwordservice",{"_index":126,"title":{"injectables/PasswordService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["patch",{"_index":576,"title":{},"body":{"controllers/UserController.html":{}}}],["patch()@routedoc({operation",{"_index":571,"title":{},"body":{"controllers/UserController.html":{}}}],["payload",{"_index":408,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":420,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":419,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["pk_a3ffb1c0c8416b9fc6f907b7433",{"_index":517,"title":{},"body":{"classes/SchemaSync1614798846236.html":{}}}],["plainpass",{"_index":443,"title":{},"body":{"injectables/PasswordService.html":{}}}],["plaintoclass",{"_index":352,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["plaintoclass(this.validateclass",{"_index":369,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["please",{"_index":829,"title":{},"body":{"index.html":{}}}],["pm2",{"_index":795,"title":{},"body":{"index.html":{}}}],["port",{"_index":271,"title":{},"body":{"modules/ConfigModule.html":{},"miscellaneous/variables.html":{}}}],["possible",{"_index":824,"title":{},"body":{"index.html":{}}}],["post",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["post('change",{"_index":557,"title":{},"body":{"controllers/UserController.html":{}}}],["post('signin",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup')@routedoc({operation",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":268,"title":{},"body":{"modules/ConfigModule.html":{}}}],["postgres_db",{"_index":929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postgres_host",{"_index":930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postgres_password",{"_index":928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postgres_port",{"_index":931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postgres_user",{"_index":927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postgresql",{"_index":756,"title":{},"body":{"index.html":{}}}],["pre",{"_index":785,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":44,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["primary",{"_index":518,"title":{},"body":{"classes/SchemaSync1614798846236.html":{}}}],["primarygeneratedcolumn",{"_index":215,"title":{},"body":{"classes/BaseEntity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":207,"title":{},"body":{"classes/BaseEntity.html":{},"classes/User.html":{}}}],["private",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"injectables/UserService.html":{}}}],["process.env.jwt_expires",{"_index":920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.postgres_db",{"_index":938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.postgres_host",{"_index":935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.postgres_password",{"_index":937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.postgres_user",{"_index":936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prod/dev/debug",{"_index":807,"title":{},"body":{"index.html":{}}}],["production",{"_index":282,"title":{},"body":{"modules/ConfigModule.html":{},"index.html":{}}}],["project",{"_index":894,"title":{},"body":{"index.html":{}}}],["projects",{"_index":884,"title":{},"body":{"index.html":{}}}],["promise",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IValidateClass.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"classes/SchemaSync1614798846236.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{}}}],["prop",{"_index":876,"title":{},"body":{"index.html":{}}}],["properties",{"_index":153,"title":{},"body":{"classes/AuthResponse.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"classes/SigninUserDto.html":{},"classes/User.html":{}}}],["props",{"_index":238,"title":{},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["provide",{"_index":251,"title":{},"body":{"modules/CommonModule.html":{}}}],["provided",{"_index":437,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":497,"title":{},"body":{"classes/SchemaSync1614798846236.html":{},"miscellaneous/variables.html":{}}}],["publicroute",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["purpose",{"_index":766,"title":{},"body":{"index.html":{}}}],["queryrunner",{"_index":501,"title":{},"body":{"classes/SchemaSync1614798846236.html":{}}}],["queryrunner.query",{"_index":505,"title":{},"body":{"classes/SchemaSync1614798846236.html":{}}}],["queryrunner.query(`drop",{"_index":520,"title":{},"body":{"classes/SchemaSync1614798846236.html":{}}}],["readme",{"_index":597,"title":{},"body":{"controllers/UserController.html":{}}}],["readonly",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IValidateClass.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{}}}],["rebuilding",{"_index":859,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":380,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["registeras('app",{"_index":913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras('database",{"_index":933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["removes",{"_index":869,"title":{},"body":{"index.html":{}}}],["repository",{"_index":609,"title":{},"body":{"injectables/UserService.html":{}}}],["req",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IApiDocOptions.html":{},"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{},"miscellaneous/variables.html":{}}}],["request.decorator",{"_index":580,"title":{},"body":{"controllers/UserController.html":{}}}],["request.decorator.ts",{"_index":697,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":480,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponse.html":{},"injectables/AuthService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["response.statuscode",{"_index":671,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{}}}],["response.ts",{"_index":151,"title":{},"body":{"classes/AuthResponse.html":{},"coverage.html":{}}}],["response.ts:8",{"_index":156,"title":{},"body":{"classes/AuthResponse.html":{}}}],["responsetimeoutinterceptor",{"_index":459,"title":{"injectables/ResponseTimeoutInterceptor.html":{}},"body":{"injectables/ResponseTimeoutInterceptor.html":{},"coverage.html":{}}}],["restart",{"_index":870,"title":{},"body":{"index.html":{}}}],["restartnote",{"_index":871,"title":{},"body":{"index.html":{}}}],["result",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"classes/CreateUserDto.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"classes/CreateUserDto.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["reusable",{"_index":596,"title":{},"body":{"controllers/UserController.html":{}}}],["rid",{"_index":883,"title":{},"body":{"index.html":{}}}],["rimraf",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["route",{"_index":331,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"miscellaneous/variables.html":{}}}],["route.decorator",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["route.decorator.ts",{"_index":695,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["routedoc",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IRoteDocOptions.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["routes",{"_index":598,"title":{},"body":{"controllers/UserController.html":{}}}],["rsponse.interceptor.ts",{"_index":660,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{},"coverage.html":{}}}],["rsponse.interceptor.ts:12",{"_index":665,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{}}}],["run",{"_index":861,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":483,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":485,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["salt_rounds",{"_index":439,"title":{},"body":{"injectables/PasswordService.html":{}}}],["save",{"_index":767,"title":{},"body":{"index.html":{}}}],["schema",{"_index":932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schemasync.ts",{"_index":495,"title":{},"body":{"classes/SchemaSync1614798846236.html":{},"coverage.html":{}}}],["schemasync.ts:12",{"_index":502,"title":{},"body":{"classes/SchemaSync1614798846236.html":{}}}],["schemasync.ts:4",{"_index":499,"title":{},"body":{"classes/SchemaSync1614798846236.html":{}}}],["schemasync.ts:6",{"_index":504,"title":{},"body":{"classes/SchemaSync1614798846236.html":{}}}],["schemasync1614798846236",{"_index":493,"title":{"classes/SchemaSync1614798846236.html":{}},"body":{"classes/SchemaSync1614798846236.html":{},"coverage.html":{}}}],["scripts",{"_index":792,"title":{},"body":{"index.html":{}}}],["secret",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":418,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":314,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}}}],["set",{"_index":281,"title":{},"body":{"modules/ConfigModule.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["setmetadata(is_public_route",{"_index":940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":888,"title":{},"body":{"index.html":{}}}],["settings",{"_index":832,"title":{},"body":{"index.html":{}}}],["setup",{"_index":780,"title":{},"body":{"index.html":{}}}],["sign",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin",{"_index":48,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SigninUserDto.html":{}}}],["signin(@body",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signinuserdto",{"_index":51,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(user",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinuserdto",{"_index":52,"title":{"classes/SigninUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SigninUserDto.html":{},"coverage.html":{}}}],["signoptions",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":50,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["signup(@body",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(createuserdto",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["skeleton",{"_index":885,"title":{},"body":{"index.html":{}}}],["skeletons",{"_index":772,"title":{},"body":{"index.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"classes/CreateUserDto.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["spend",{"_index":770,"title":{},"body":{"index.html":{}}}],["spending",{"_index":886,"title":{},"body":{"index.html":{}}}],["splitted",{"_index":778,"title":{},"body":{"index.html":{}}}],["src/.../api",{"_index":906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.config.ts",{"_index":907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../check",{"_index":748,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../database.config.ts",{"_index":909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":747,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public",{"_index":910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../route",{"_index":911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../validation.schema.ts",{"_index":908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":43,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:34",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:49",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:38",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:48",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:57",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth",{"_index":150,"title":{},"body":{"classes/AuthResponse.html":{},"coverage.html":{}}}],["src/auth/dto/signin",{"_index":521,"title":{},"body":{"classes/SigninUserDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":250,"title":{},"body":{"modules/CommonModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":421,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/interfaces/jwt",{"_index":577,"title":{},"body":{"controllers/UserController.html":{}}}],["src/auth/strategies/jwt",{"_index":399,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local",{"_index":428,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/common/common.module.ts",{"_index":246,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/common/decorators/api",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IApiDocOptions.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/public",{"_index":389,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/route",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IRoteDocOptions.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/user",{"_index":579,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/entities/base.entity",{"_index":541,"title":{},"body":{"classes/User.html":{}}}],["src/common/entities/base.entity.ts",{"_index":195,"title":{},"body":{"classes/BaseEntity.html":{},"coverage.html":{}}}],["src/common/entities/base.entity.ts:10",{"_index":208,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entity.ts:15",{"_index":206,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entity.ts:20",{"_index":210,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/guards/validate",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{},"coverage.html":{}}}],["src/common/interceptors/response",{"_index":460,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/wrap",{"_index":659,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/services/password.service",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["src/common/services/password.service.ts",{"_index":438,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{}}}],["src/common/services/password.service.ts:16",{"_index":449,"title":{},"body":{"injectables/PasswordService.html":{}}}],["src/common/services/password.service.ts:26",{"_index":444,"title":{},"body":{"injectables/PasswordService.html":{}}}],["src/common/services/password.service.ts:9",{"_index":454,"title":{},"body":{"injectables/PasswordService.html":{}}}],["src/common/utils/check",{"_index":628,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/config/app.config.ts",{"_index":704,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/config.module.ts",{"_index":253,"title":{},"body":{"modules/ConfigModule.html":{}}}],["src/config/database.config.ts",{"_index":705,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/validation.schema.ts",{"_index":706,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":707,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/migrations/1614798846236",{"_index":494,"title":{},"body":{"classes/SchemaSync1614798846236.html":{},"coverage.html":{}}}],["src/user/dto/user.dto",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["src/user/dto/user.dto.ts",{"_index":221,"title":{},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/user.dto.ts:11",{"_index":229,"title":{},"body":{"classes/BasicUserDto.html":{}}}],["src/user/dto/user.dto.ts:14",{"_index":230,"title":{},"body":{"classes/BasicUserDto.html":{}}}],["src/user/dto/user.dto.ts:24",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/user/dto/user.dto.ts:39",{"_index":245,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["src/user/dto/user.dto.ts:8",{"_index":227,"title":{},"body":{"classes/BasicUserDto.html":{}}}],["src/user/entity/user.entity",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["src/user/entity/user.entity.ts",{"_index":525,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/user/entity/user.entity.ts:16",{"_index":531,"title":{},"body":{"classes/User.html":{}}}],["src/user/entity/user.entity.ts:19",{"_index":532,"title":{},"body":{"classes/User.html":{}}}],["src/user/entity/user.entity.ts:22",{"_index":529,"title":{},"body":{"classes/User.html":{}}}],["src/user/entity/user.entity.ts:27",{"_index":534,"title":{},"body":{"classes/User.html":{}}}],["src/user/entity/user.entity.ts:30",{"_index":539,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.controller.ts",{"_index":551,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:27",{"_index":565,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:42",{"_index":568,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:58",{"_index":573,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:76",{"_index":562,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:93",{"_index":559,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/user/user.module.ts",{"_index":603,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/user/user.service.ts",{"_index":606,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:101",{"_index":613,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:13",{"_index":610,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:24",{"_index":619,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:33",{"_index":621,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:46",{"_index":623,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:57",{"_index":615,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:75",{"_index":624,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:89",{"_index":618,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":812,"title":{},"body":{"index.html":{}}}],["start/stop",{"_index":860,"title":{},"body":{"index.html":{}}}],["started",{"_index":754,"title":{"index.html":{}},"body":{"index.html":{}}}],["starter",{"_index":758,"title":{},"body":{"index.html":{}}}],["statements",{"_index":681,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":663,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{}}}],["stop",{"_index":867,"title":{},"body":{"index.html":{}}}],["stops",{"_index":868,"title":{},"body":{"index.html":{}}}],["strategies/jwt",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":402,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":154,"title":{},"body":{"classes/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"classes/SchemaSync1614798846236.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string().required",{"_index":923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sudo",{"_index":851,"title":{},"body":{"index.html":{}}}],["super",{"_index":391,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["super.canactivate(context",{"_index":395,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":784,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":897,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":306,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["synchronize",{"_index":278,"title":{},"body":{"modules/ConfigModule.html":{},"index.html":{}}}],["table",{"_index":506,"title":{},"body":{"classes/SchemaSync1614798846236.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IApiDocOptions.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["template",{"_index":759,"title":{},"body":{"index.html":{}}}],["this._createauthresponse(user",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.signin(req.user",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(createuserdto",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":436,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.defaulttimeoutms",{"_index":488,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["this.firstname",{"_index":546,"title":{},"body":{"classes/User.html":{}}}],["this.jwtservice.sign",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.lastname",{"_index":547,"title":{},"body":{"classes/User.html":{}}}],["this.passwordservice.comparepassword",{"_index":647,"title":{},"body":{"injectables/UserService.html":{}}}],["this.passwordservice.comparepassword(user.password",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordservice.hashpassword(changepassworddto.password",{"_index":653,"title":{},"body":{"injectables/UserService.html":{}}}],["this.passwordservice.hashpassword(createuserdto.password",{"_index":639,"title":{},"body":{"injectables/UserService.html":{}}}],["this.reflector.getallandoverride(is_public_route",{"_index":392,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.salt_rounds",{"_index":457,"title":{},"body":{"injectables/PasswordService.html":{}}}],["this.userrepository.create",{"_index":638,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.delete(userid",{"_index":643,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":631,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":633,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone(id",{"_index":632,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone(userid",{"_index":642,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.preload",{"_index":641,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(dbuser",{"_index":654,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(user",{"_index":640,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.changeuserpassword(user.id",{"_index":593,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.create(createuserdto",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.delete(user.id",{"_index":592,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":585,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(userid",{"_index":588,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebyemail(email",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.update(updateuserdto",{"_index":589,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":373,"title":{},"body":{"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{}}}],["throwerror",{"_index":481,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["throwerror(err",{"_index":492,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["throwerror(new",{"_index":491,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["thrownotfoundifnull",{"_index":627,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["thrownotfoundifnull(dbuser",{"_index":645,"title":{},"body":{"injectables/UserService.html":{}}}],["thrownotfoundifnull(entity",{"_index":749,"title":{},"body":{"miscellaneous/functions.html":{}}}],["thrownotfoundifnull(user",{"_index":634,"title":{},"body":{"injectables/UserService.html":{}}}],["throws",{"_index":752,"title":{},"body":{"miscellaneous/functions.html":{}}}],["time",{"_index":511,"title":{},"body":{"classes/SchemaSync1614798846236.html":{},"index.html":{}}}],["timeout",{"_index":463,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["timeout(this.customtimeout",{"_index":487,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["timeout.interceptor.ts",{"_index":461,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{},"coverage.html":{}}}],["timeout.interceptor.ts:15",{"_index":469,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["timeout.interceptor.ts:17",{"_index":478,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["timeout.interceptor.ts:19",{"_index":475,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["timeouterror",{"_index":482,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["timestamp",{"_index":510,"title":{},"body":{"classes/SchemaSync1614798846236.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["timestamptz",{"_index":205,"title":{},"body":{"classes/BaseEntity.html":{},"classes/User.html":{}}}],["tip",{"_index":820,"title":{},"body":{"index.html":{}}}],["todo",{"_index":594,"title":{},"body":{"controllers/UserController.html":{}}}],["together",{"_index":774,"title":{},"body":{"index.html":{}}}],["toplainonly",{"_index":219,"title":{},"body":{"classes/BaseEntity.html":{},"classes/User.html":{}}}],["touch",{"_index":801,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":213,"title":{},"body":{"classes/BaseEntity.html":{},"classes/IValidateClass.html":{},"classes/User.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{},"dependencies.html":{}}}],["triggers",{"_index":361,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["true",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"classes/BaseEntity.html":{},"modules/ConfigModule.html":{},"classes/IValidateClass.html":{},"injectables/JwtAuthGuard.html":{},"classes/User.html":{},"controllers/UserController.html":{},"guards/ValidateBodyGuard.html":{},"miscellaneous/variables.html":{}}}],["true})@column",{"_index":533,"title":{},"body":{"classes/User.html":{}}}],["true})@createdatecolumn({type",{"_index":204,"title":{},"body":{"classes/BaseEntity.html":{},"classes/User.html":{}}}],["true})@updatedatecolumn({type",{"_index":209,"title":{},"body":{"classes/BaseEntity.html":{},"classes/User.html":{}}}],["ts",{"_index":855,"title":{},"body":{"index.html":{}}}],["type",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"modules/ConfigModule.html":{},"classes/CreateUserDto.html":{},"interfaces/IApiDocOptions.html":{},"interfaces/IRoteDocOptions.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"classes/SigninUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/ValidateBodyGuard.html":{},"injectables/WrapResponseInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":329,"title":{},"body":{"interfaces/IRoteDocOptions.html":{},"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{},"miscellaneous/functions.html":{}}}],["typeorm",{"_index":217,"title":{},"body":{"classes/BaseEntity.html":{},"classes/SchemaSync1614798846236.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":256,"title":{},"body":{"modules/ConfigModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":605,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":267,"title":{},"body":{"modules/ConfigModule.html":{}}}],["ui",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":317,"title":{},"body":{"interfaces/IApiDocOptions.html":{},"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":386,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["undefined",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["unique",{"_index":545,"title":{},"body":{"classes/User.html":{}}}],["unknown",{"_index":942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["up",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"classes/SchemaSync1614798846236.html":{},"index.html":{}}}],["up(queryrunner",{"_index":503,"title":{},"body":{"classes/SchemaSync1614798846236.html":{}}}],["update",{"_index":237,"title":{},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(updateuserdto",{"_index":570,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updated",{"_index":821,"title":{},"body":{"index.html":{}}}],["updatedat",{"_index":201,"title":{},"body":{"classes/BaseEntity.html":{},"classes/SchemaSync1614798846236.html":{},"classes/User.html":{}}}],["updatedatecolumn",{"_index":216,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updateuserdto",{"_index":240,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["use",{"_index":797,"title":{},"body":{"index.html":{}}}],["useclass",{"_index":252,"title":{},"body":{"modules/CommonModule.html":{}}}],["used",{"_index":616,"title":{},"body":{"injectables/UserService.html":{}}}],["usefactory",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{},"modules/ConfigModule.html":{}}}],["useguards",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(new",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":60,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.controller",{"_index":604,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.dto.ts",{"_index":522,"title":{},"body":{"classes/SigninUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":524,"title":{},"body":{"classes/SigninUserDto.html":{}}}],["user.dto.ts:8",{"_index":523,"title":{},"body":{"classes/SigninUserDto.html":{}}}],["user.id",{"_index":590,"title":{},"body":{"controllers/UserController.html":{}}}],["user.service",{"_index":583,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":550,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userfromrequest",{"_index":578,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":569,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":15,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":273,"title":{},"body":{"modules/ConfigModule.html":{},"miscellaneous/variables.html":{}}}],["usernamefield",{"_index":434,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrepository",{"_index":611,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":507,"title":{},"body":{"classes/SchemaSync1614798846236.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userservice",{"_index":167,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":828,"title":{},"body":{"index.html":{}}}],["using",{"_index":800,"title":{},"body":{"index.html":{}}}],["usually",{"_index":769,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":508,"title":{},"body":{"classes/SchemaSync1614798846236.html":{}}}],["uuid_generate_v4",{"_index":509,"title":{},"body":{"classes/SchemaSync1614798846236.html":{}}}],["validate",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"classes/IValidateClass.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/ValidateBodyGuard.html":{}}}],["validate(bodyclass",{"_index":371,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["validate(email",{"_index":432,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":405,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatebodyguard",{"_index":56,"title":{"guards/ValidateBodyGuard.html":{}},"body":{"controllers/AuthController.html":{},"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{},"coverage.html":{}}}],["validatebodyguard(signinuserdto",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["validateclass",{"_index":360,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["validateuser",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":355,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{},"miscellaneous/variables.html":{}}}],["validation.schema",{"_index":263,"title":{},"body":{"modules/ConfigModule.html":{}}}],["validationresult",{"_index":370,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["validationresult.length",{"_index":372,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["validationresult.map((err",{"_index":374,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["validationschema",{"_index":266,"title":{},"body":{"modules/ConfigModule.html":{}}}],["validator",{"_index":233,"title":{},"body":{"classes/BasicUserDto.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/IValidateClass.html":{},"classes/SigninUserDto.html":{},"classes/UpdateUserDto.html":{},"guards/ValidateBodyGuard.html":{},"dependencies.html":{}}}],["value",{"_index":452,"title":{},"body":{"injectables/PasswordService.html":{},"injectables/ResponseTimeoutInterceptor.html":{},"classes/SchemaSync1614798846236.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":693,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":905,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["varying",{"_index":515,"title":{},"body":{"classes/SchemaSync1614798846236.html":{}}}],["via",{"_index":848,"title":{},"body":{"index.html":{}}}],["warnings",{"_index":856,"title":{},"body":{"index.html":{}}}],["what's",{"_index":775,"title":{},"body":{"index.html":{}}}],["whatever",{"_index":892,"title":{},"body":{"index.html":{}}}],["whether",{"_index":364,"title":{},"body":{"classes/IValidateClass.html":{},"guards/ValidateBodyGuard.html":{}}}],["won't",{"_index":815,"title":{},"body":{"index.html":{}}}],["work",{"_index":841,"title":{},"body":{"index.html":{}}}],["wrapped",{"_index":764,"title":{},"body":{"index.html":{}}}],["wrapresponseinterceptor",{"_index":658,"title":{"injectables/WrapResponseInterceptor.html":{}},"body":{"injectables/WrapResponseInterceptor.html":{},"coverage.html":{}}}],["wraps",{"_index":661,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{}}}],["x",{"_index":843,"title":{},"body":{"index.html":{}}}],["yes",{"_index":471,"title":{},"body":{"injectables/ResponseTimeoutInterceptor.html":{}}}],["zone",{"_index":512,"title":{},"body":{"classes/SchemaSync1614798846236.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Main app module\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CommonModule\n                        \n                        \n                            ConfigModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { UserModule } from './user/user.module'\nimport { ConfigModule } from './config/config.module'\nimport { CommonModule } from './common/common.module'\nimport { AuthModule } from './auth/auth.module'\n\n/**\n * Main app module\n */\n@Module({\n  imports: [\n    ConfigModule,\n    UserModule,\n    CommonModule,\n    AuthModule,\n    // load all other modules here\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n            \n                Description\n            \n            \n                Auth Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                signin\n                            \n                            \n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signin\n                        \n                        \n                    \n                \n            \n            \n                \nsignin(signinUserDto: SigninUserDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(new ValidateBodyGuard(), LocalAuthGuard)@Post('signin')@RouteDoc({operation: 'Sign in existing user', notFound: true, created: undefined})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:34\n                \n            \n\n\n            \n                \n                    Signin existing user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    signinUserDto\n                                    \n                                                SigninUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : SigninUserDto\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : Request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         AuthResponse\n\n                    \n                    \n                        AuthResponse\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')@RouteDoc({operation: 'Sign up new user', conflict: true, created: undefined})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:49\n                \n            \n\n\n            \n                \n                    Signup new user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : CreateUserDto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UseGuards, Request } from '@nestjs/common'\nimport { ApiDoc } from 'src/common/decorators/api-doc.decorator'\nimport { CreateUserDto } from 'src/user/dto/user.dto'\nimport { AuthService } from './auth.service'\nimport { AuthResponse } from './dto/auth-response'\nimport { SigninUserDto } from './dto/signin-user.dto'\nimport { PublicRoute } from '../common/decorators/public-route.decorator'\nimport { LocalAuthGuard } from './guards/local-auth.guard'\nimport { ValidateBodyGuard } from 'src/common/guards/validate-body.guard'\nimport { RouteDoc } from 'src/common/decorators/route-doc.decorator'\n\n/**\n * Auth Controller\n */\n@ApiDoc({ tag: 'auth', isPublic: true })\n@PublicRoute()\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  /**\n   * Signin existing user\n   * @param signinUserDto: SigninUserDto\n   * @param req: Request\n   * @returns AuthResponse\n   */\n  @UseGuards(new ValidateBodyGuard(SigninUserDto), LocalAuthGuard)\n  @Post('signin')\n  @RouteDoc({\n    operation: 'Sign in existing user',\n    notFound: true,\n    created: { type: AuthResponse },\n  })\n  signin(@Body() signinUserDto: SigninUserDto, @Request() req): AuthResponse {\n    return this.authService.signin(req.user)\n  }\n\n  /**\n   * Signup new user\n   * @param createUserDto: CreateUserDto\n   * @returns Promise\n   */\n  @Post('signup')\n  @RouteDoc({\n    operation: 'Sign up new user',\n    conflict: true,\n    created: { type: AuthResponse },\n  })\n  async signup(@Body() createUserDto: CreateUserDto): Promise {\n    return await this.authService.signup(createUserDto)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            PasswordService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { JwtModule } from '@nestjs/jwt'\nimport { PassportModule } from '@nestjs/passport'\nimport { PasswordService } from 'src/common/services/password.service'\nimport { UserModule } from 'src/user/user.module'\nimport { AuthController } from './auth.controller'\nimport { AuthService } from './auth.service'\nimport { LocalStrategy } from './strategies/local-auth.strategy'\nimport { JwtStrategy } from './strategies/jwt-auth.stategy'\n\n@Module({\n  imports: [\n    UserModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        secret: configService.get('app.jwtSecret'),\n        signOptions: {\n          expiresIn: configService.get('app.jwtExpires'),\n        },\n      }),\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, PasswordService, LocalStrategy, JwtStrategy],\n  exports: [JwtModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResponse.html":{"url":"classes/AuthResponse.html","title":"class - AuthResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth-response.ts\n        \n\n            \n                Description\n            \n            \n                Auth response with jwt\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                jwt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            jwt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiResponseProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/auth-response.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiResponseProperty } from '@nestjs/swagger'\n\n/**\n * Auth response with jwt\n */\nexport class AuthResponse {\n  @ApiResponseProperty()\n  jwt: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                Auth Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _createAuthResponse\n                            \n                            \n                                signin\n                            \n                            \n                                    Async\n                                signup\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, passwordService: PasswordService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            _createAuthResponse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _createAuthResponse(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:57\n                \n            \n\n\n            \n                \n                    Helper private method to create jwt\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : User\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         AuthResponse\n\n                    \n                    \n                        AuthResponse\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signin\n                        \n                        \n                    \n                \n            \n            \n                \nsignin(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:48\n                \n            \n\n\n            \n                \n                    Sign in existing user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         AuthResponse\n\n                    \n                    \n                        AuthResponse\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:38\n                \n            \n\n\n            \n                \n                    Signup new user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : CreateUserDto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:26\n                \n            \n\n\n            \n                \n                    Validate user when signin\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : string\n\n                                    \n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { JwtService } from '@nestjs/jwt'\nimport { PasswordService } from 'src/common/services/password.service'\nimport { CreateUserDto } from 'src/user/dto/user.dto'\nimport { User } from 'src/user/entity/user.entity'\nimport { UserService } from 'src/user/user.service'\nimport { AuthResponse } from './dto/auth-response'\n\n/**\n * Auth Service\n */\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly passwordService: PasswordService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  /**\n   * Validate user when signin\n   * @param email: string\n   * @param pass: string\n   * @returns Promise\n   */\n  async validateUser(email: string, pass: string): Promise {\n    const user = await this.userService.findOneByEmail(email)\n    if (!user) return null\n    const isPasswordMatch = await this.passwordService.comparePassword(user.password, pass)\n    return isPasswordMatch ? user : null\n  }\n\n  /**\n   * Signup new user\n   * @param createUserDto: CreateUserDto\n   * @returns Promise\n   */\n  async signup(createUserDto: CreateUserDto): Promise {\n    const user = await this.userService.create(createUserDto)\n    return this._createAuthResponse(user)\n  }\n\n  /**\n   * Sign in existing user\n   * @param user User\n   * @returns AuthResponse\n   */\n  signin(user: User): AuthResponse {\n    return this._createAuthResponse(user)\n  }\n\n  /**\n   * Helper private method to create jwt\n   * @param user: User\n   * @returns AuthResponse\n   */\n  private _createAuthResponse(user: User): AuthResponse {\n    const { id, email } = user\n    return {\n      jwt: this.jwtService.sign({ id, email }),\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseEntity.html":{"url":"classes/BaseEntity.html","title":"class - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entities/base.entity.ts\n        \n\n            \n                Description\n            \n            \n                Base Entity with common columns\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiHideProperty()@Exclude({toPlainOnly: true})@CreateDateColumn({type: 'timestamptz'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entities/base.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entities/base.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiHideProperty()@Exclude({toPlainOnly: true})@UpdateDateColumn({type: 'timestamptz'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/entities/base.entity.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from '@nestjs/swagger'\nimport { Exclude } from 'class-transformer'\nimport { CreateDateColumn, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm'\n\n/**\n * Base Entity with common columns\n */\nexport abstract class BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string\n\n  @ApiHideProperty()\n  @Exclude({ toPlainOnly: true })\n  @CreateDateColumn({ type: 'timestamptz' })\n  createdAt: Date\n\n  @ApiHideProperty()\n  @Exclude({ toPlainOnly: true })\n  @UpdateDateColumn({ type: 'timestamptz' })\n  updatedAt: Date\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BasicUserDto.html":{"url":"classes/BasicUserDto.html","title":"class - BasicUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BasicUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n            \n                Description\n            \n            \n                Basic User DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user.dto.ts:14\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { IsEmail, IsString, MinLength } from 'class-validator'\n/**\n * Basic User DTO\n */\nclass BasicUserDto {\n  @IsEmail()\n  email: string\n\n  @IsString()\n  firstName: string\n\n  @IsString()\n  lastName: string\n}\n\n/**\n * Create User DTO\n * @extends BasicUserDto\n */\nexport class CreateUserDto extends BasicUserDto {\n  @IsString()\n  @MinLength(6)\n  password: string\n}\n\n/**\n * Update User DTO\n * @extends BasicUserDto: all props marked as optional\n */\nexport class UpdateUserDto extends PartialType(BasicUserDto) {}\n\n/**\n * Change user password DTO\n */\nexport class ChangePasswordDto {\n  @IsString()\n  @MinLength(6)\n  password: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n            \n                Description\n            \n            \n                Change user password DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(6)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user.dto.ts:39\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { IsEmail, IsString, MinLength } from 'class-validator'\n/**\n * Basic User DTO\n */\nclass BasicUserDto {\n  @IsEmail()\n  email: string\n\n  @IsString()\n  firstName: string\n\n  @IsString()\n  lastName: string\n}\n\n/**\n * Create User DTO\n * @extends BasicUserDto\n */\nexport class CreateUserDto extends BasicUserDto {\n  @IsString()\n  @MinLength(6)\n  password: string\n}\n\n/**\n * Update User DTO\n * @extends BasicUserDto: all props marked as optional\n */\nexport class UpdateUserDto extends PartialType(BasicUserDto) {}\n\n/**\n * Change user password DTO\n */\nexport class ChangePasswordDto {\n  @IsString()\n  @MinLength(6)\n  password: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n    Modules\n    CommonModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/common.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { APP_GUARD } from '@nestjs/core'\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard'\n\n@Module({\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n})\nexport class CommonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigModule.html":{"url":"modules/ConfigModule.html","title":"module - ConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/config.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Config Module\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ConfigModule as NestConfigModule, ConfigService } from '@nestjs/config'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { appConfig } from './app.config'\nimport { databaseConfig } from './database.config'\nimport { createValidationSchema } from './validation.schema'\n/**\n * Config Module\n */\n@Module({\n  imports: [\n    NestConfigModule.forRoot({\n      isGlobal: true,\n      load: [appConfig, databaseConfig],\n      validationSchema: createValidationSchema(),\n    }),\n\n    TypeOrmModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (configService) => ({\n        type: 'postgres',\n        host: configService.get('database.host'),\n        port: configService.get('database.port'),\n        username: configService.get('database.username'),\n        password: configService.get('database.password'),\n        database: configService.get('database.name'),\n        synchronize: configService.get('app.nodeEnv') === 'development', // DO NOT set this to true for production\n        logging: true,\n        autoLoadEntities: true, // instead of => entities: [`${__dirname}/**/*.entity.*`]\n      }),\n    }),\n  ],\n})\nexport class ConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n            \n                Description\n            \n            \n                Create User DTO\n\n            \n\n            \n                Extends\n            \n            \n                        BasicUserDto\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(6)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         BasicUserDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         BasicUserDto:8\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         BasicUserDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         BasicUserDto:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         BasicUserDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         BasicUserDto:14\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { IsEmail, IsString, MinLength } from 'class-validator'\n/**\n * Basic User DTO\n */\nclass BasicUserDto {\n  @IsEmail()\n  email: string\n\n  @IsString()\n  firstName: string\n\n  @IsString()\n  lastName: string\n}\n\n/**\n * Create User DTO\n * @extends BasicUserDto\n */\nexport class CreateUserDto extends BasicUserDto {\n  @IsString()\n  @MinLength(6)\n  password: string\n}\n\n/**\n * Update User DTO\n * @extends BasicUserDto: all props marked as optional\n */\nexport class UpdateUserDto extends PartialType(BasicUserDto) {}\n\n/**\n * Change user password DTO\n */\nexport class ChangePasswordDto {\n  @IsString()\n  @MinLength(6)\n  password: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IApiDocOptions.html":{"url":"interfaces/IApiDocOptions.html","title":"interface - IApiDocOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IApiDocOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/decorators/api-doc.decorator.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        isPublic\n                                \n                                \n                                        tag\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isPublic\n                                    \n                                \n                                \n                                    \n                                        isPublic:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tag\n                                    \n                                \n                                \n                                    \n                                        tag:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { applyDecorators } from '@nestjs/common'\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiInternalServerErrorResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger'\n\ninterface IApiDocOptions {\n  tag: string\n  isPublic?: boolean\n}\n\n/**\n * Decorator for swagger docs controller\n * @param options: IApiDocOptions\n * @returns result of @nestjs/common applyDecorators function\n */\nexport const ApiDoc = ({ tag = '', isPublic = false }: IApiDocOptions) => {\n  const decorators = [\n    ApiTags(tag),\n    ApiBadRequestResponse({ description: 'Bad Request' }),\n    ApiInternalServerErrorResponse({ description: 'Internal Server Error' }),\n  ]\n\n  if (!isPublic)\n    decorators.push(ApiBearerAuth(), ApiUnauthorizedResponse({ description: 'Unauthorized' }))\n\n  return applyDecorators(...decorators)\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRoteDocOptions.html":{"url":"interfaces/IRoteDocOptions.html","title":"interface - IRoteDocOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRoteDocOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/decorators/route-doc.decorator.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        accepted\n                                \n                                \n                                            Optional\n                                        conflict\n                                \n                                \n                                            Optional\n                                        created\n                                \n                                \n                                            Optional\n                                        notFound\n                                \n                                \n                                            Optional\n                                        ok\n                                \n                                \n                                            Optional\n                                        operation\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accepted\n                                    \n                                \n                                \n                                    \n                                        accepted:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        conflict\n                                    \n                                \n                                \n                                    \n                                        conflict:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        created\n                                    \n                                \n                                \n                                    \n                                        created:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        notFound\n                                    \n                                \n                                \n                                    \n                                        notFound:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ok\n                                    \n                                \n                                \n                                    \n                                        ok:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operation\n                                    \n                                \n                                \n                                    \n                                        operation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { applyDecorators } from '@nestjs/common'\nimport {\n  ApiAcceptedResponse,\n  ApiConflictResponse,\n  ApiCreatedResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n} from '@nestjs/swagger'\n\ninterface IRoteDocOptions {\n  operation?: string\n  conflict?: boolean\n  notFound?: boolean\n  ok?: { type?: typeof Function | any; isArray?: boolean }\n  created?: { type?: typeof Function | any; isArray?: boolean }\n  accepted?: { type?: typeof Function | any; isArray?: boolean }\n}\n\n/**\n * Common route docs swagger decorator\n * @param options IRouteDocOptions\n * @returns result of @nestjs/common applyDecorators function\n */\nexport const RouteDoc = ({\n  operation,\n  conflict,\n  notFound,\n  ok,\n  created,\n  accepted,\n}: IRoteDocOptions) => {\n  const decorators = []\n  if (operation) decorators.push(ApiOperation({ description: operation }))\n  if (conflict) decorators.push(ApiConflictResponse({ description: 'Already exists' }))\n  if (notFound) decorators.push(ApiNotFoundResponse({ description: 'Not found' }))\n  if (ok) {\n    decorators.push(ApiOkResponse({ description: 'Ok', type: ok.type, isArray: ok.isArray }))\n  }\n  if (created) {\n    decorators.push(\n      ApiCreatedResponse({ description: 'Created', type: created.type, isArray: created.isArray }),\n    )\n  }\n  if (accepted) {\n    decorators.push(\n      ApiAcceptedResponse({\n        description: 'Accepted',\n        type: accepted.type,\n        isArray: accepted.isArray,\n      }),\n    )\n  }\n\n  return applyDecorators(...decorators)\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IValidateClass.html":{"url":"classes/IValidateClass.html","title":"class - IValidateClass","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IValidateClass\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/validate-body.guard.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, CanActivate, BadRequestException } from '@nestjs/common'\nimport { plainToClass } from 'class-transformer'\n\nimport { validate } from 'class-validator'\n\nclass IValidateClass {}\n\n/**\n * Guard to validate request body in cases validation must be dome before other guards\n */\n@Injectable()\nexport class ValidateBodyGuard implements CanActivate {\n  constructor(private readonly ValidateClass: typeof IValidateClass) {}\n\n  /**\n   * Method which triggers when guard is launched, decides whether to pass request or not\n   * @param context ExecutionContext\n   * @returns Promise\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest()\n    const { body } = request\n    const bodyClass = plainToClass(this.ValidateClass, body)\n    const validationResult = await validate(bodyClass)\n    if (validationResult && validationResult.length) {\n      throw new BadRequestException(\n        validationResult.map((err) => {\n          const [errMsg] = Object.values(err.constraints)\n          return errMsg\n        }),\n      )\n    }\n    return true\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n            \n                Description\n            \n            \n                Jwt Auth Guard\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/jwt-auth.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/jwt-auth.guard.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleRequest\n                        \n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/jwt-auth.guard.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\nimport { Reflector } from '@nestjs/core'\nimport { IS_PUBLIC_ROUTE } from 'src/common/decorators/public-route.decorator'\n\n/**\n * Jwt Auth Guard\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super()\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_ROUTE, [\n      context.getHandler(),\n      context.getClass(),\n    ])\n    if (isPublic) {\n      return true\n    }\n    return super.canActivate(context)\n  }\n\n  handleRequest(err, user) {\n    // throw an exception based on either \"info\" or \"err\" arguments\n    if (err || !user) {\n      throw err || new UnauthorizedException()\n    }\n    return user\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt-auth.stategy.ts\n        \n\n            \n                Description\n            \n            \n                Passport JWT Strategy\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt-auth.stategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \nvalidate(payload: IJwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt-auth.stategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IJwtUser\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { Injectable } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { IJwtPayload, IJwtUser } from '../interfaces/jwt-interface'\n\n/**\n * Passport JWT Strategy\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('app.jwtSecret'),\n    })\n  }\n\n  validate(payload: IJwtPayload): IJwtUser {\n    return { id: payload.id, email: payload.email }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n            \n                Description\n            \n            \n                Local Auth Guard\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/local-auth.guard.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleRequest\n                        \n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/local-auth.guard.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\n\n/**\n * Local Auth Guard\n */\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {\n  constructor() {\n    super()\n  }\n\n  handleRequest(err, user) {\n    // throw an exception based on either \"info\" or \"err\" arguments\n    if (err || !user) {\n      throw err || new NotFoundException('User not found')\n    }\n    return user\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local-auth.strategy.ts\n        \n\n            \n                Description\n            \n            \n                Passport Local Strategy\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local-auth.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local-auth.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { Injectable, NotFoundException } from '@nestjs/common'\nimport { AuthService } from '../auth.service'\nimport { User } from 'src/user/entity/user.entity'\n\n/**\n * Passport Local Strategy\n */\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email', passwordField: 'password' })\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password)\n    if (!user) {\n      throw new NotFoundException('User with provided email not found')\n    }\n    return user\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordService.html":{"url":"injectables/PasswordService.html","title":"injectable - PasswordService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PasswordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/password.service.ts\n        \n\n            \n                Description\n            \n            \n                Password Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                SALT_ROUNDS\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            comparePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    comparePassword(hash, plainPass)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/password.service.ts:26\n                \n            \n\n\n            \n                \n                    Compare passwords method\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hash\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : string\n\n                                    \n                                \n                                \n                                    plainPass\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        : Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(plainPass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/password.service.ts:16\n                \n            \n\n\n            \n                \n                    Hash password method\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    plainPass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        : Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            SALT_ROUNDS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/common/services/password.service.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport * as bcrypt from 'bcrypt'\n\n/**\n * Password Service\n */\n@Injectable()\nexport class PasswordService {\n  private readonly SALT_ROUNDS = 10\n\n  /**\n   * Hash password method\n   * @param plainPass: string\n   * @returns: Promise\n   */\n  async hashPassword(plainPass: string): Promise {\n    return await bcrypt.hash(plainPass, this.SALT_ROUNDS)\n  }\n\n  /**\n   * Compare passwords method\n   * @param hash: string\n   * @param plainPass: string\n   * @returns: Promise\n   */\n  async comparePassword(hash, plainPass): Promise {\n    return await bcrypt.compare(plainPass, hash)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseTimeoutInterceptor.html":{"url":"injectables/ResponseTimeoutInterceptor.html","title":"injectable - ResponseTimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ResponseTimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/response-timeout.interceptor.ts\n        \n\n            \n                Description\n            \n            \n                Interceptor to set response timeout, defaults to 5000ms\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                defaultTimeoutMs\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customTimeout?: number)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/response-timeout.interceptor.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customTimeout\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/response-timeout.interceptor.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            defaultTimeoutMs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 5000\n                        \n                    \n                        \n                            \n                                    Defined in src/common/interceptors/response-timeout.interceptor.ts:17\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n  RequestTimeoutException,\n} from '@nestjs/common'\nimport { Observable, throwError, TimeoutError } from 'rxjs'\nimport { catchError, timeout } from 'rxjs/operators'\n\n/**\n * Interceptor to set response timeout, defaults to 5000ms\n */\n@Injectable()\nexport class ResponseTimeoutInterceptor implements NestInterceptor {\n  constructor(private readonly customTimeout?: number) {}\n  private readonly defaultTimeoutMs = 5000\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      timeout(this.customTimeout || this.defaultTimeoutMs),\n      catchError((err) => {\n        if (err instanceof TimeoutError) {\n          return throwError(new RequestTimeoutException())\n        }\n        return throwError(err)\n      }),\n    )\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SchemaSync1614798846236.html":{"url":"classes/SchemaSync1614798846236.html","title":"class - SchemaSync1614798846236","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SchemaSync1614798846236\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1614798846236-SchemaSync.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'SchemaSync1614798846236'\n                        \n                    \n                        \n                            \n                                    Defined in src/migrations/1614798846236-SchemaSync.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1614798846236-SchemaSync.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1614798846236-SchemaSync.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm'\n\nexport class SchemaSync1614798846236 implements MigrationInterface {\n  name = 'SchemaSync1614798846236'\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `CREATE TABLE \"users\" (\"id\" uuid NOT NULL DEFAULT uuid_generate_v4(), \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), \"firstName\" character varying NOT NULL, \"lastName\" character varying NOT NULL, CONSTRAINT \"PK_a3ffb1c0c8416b9fc6f907b7433\" PRIMARY KEY (\"id\"))`,\n    )\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`DROP TABLE \"users\"`)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SigninUserDto.html":{"url":"classes/SigninUserDto.html","title":"class - SigninUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SigninUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/signin-user.dto.ts\n        \n\n            \n                Description\n            \n            \n                Signin user DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/signin-user.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(6)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/signin-user.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, MinLength } from 'class-validator'\n\n/**\n * Signin user DTO\n */\nexport class SigninUserDto {\n  @IsEmail()\n  email: string\n\n  @IsString()\n  @MinLength(6)\n  password: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n            \n                Description\n            \n            \n                Update User DTO\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { IsEmail, IsString, MinLength } from 'class-validator'\n/**\n * Basic User DTO\n */\nclass BasicUserDto {\n  @IsEmail()\n  email: string\n\n  @IsString()\n  firstName: string\n\n  @IsString()\n  lastName: string\n}\n\n/**\n * Create User DTO\n * @extends BasicUserDto\n */\nexport class CreateUserDto extends BasicUserDto {\n  @IsString()\n  @MinLength(6)\n  password: string\n}\n\n/**\n * Update User DTO\n * @extends BasicUserDto: all props marked as optional\n */\nexport class UpdateUserDto extends PartialType(BasicUserDto) {}\n\n/**\n * Change user password DTO\n */\nexport class ChangePasswordDto {\n  @IsString()\n  @MinLength(6)\n  password: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entity/user.entity.ts\n        \n\n            \n                Description\n            \n            \n                User Entity\n\n            \n\n            \n                Extends\n            \n            \n                        BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fullName\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entity/user.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entity/user.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entity/user.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiHideProperty()@Exclude({toPlainOnly: true})@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entity/user.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiHideProperty()@Exclude({toPlainOnly: true})@CreateDateColumn({type: 'timestamptz'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         BaseEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseEntity:15\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         BaseEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiHideProperty()@Exclude({toPlainOnly: true})@UpdateDateColumn({type: 'timestamptz'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         BaseEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseEntity:20\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fullName\n                    \n                \n\n                \n                    \n                        getfullName()\n                    \n                \n                            \n                                \n                                    Defined in src/user/entity/user.entity.ts:30\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiHideProperty } from '@nestjs/swagger'\nimport { Exclude, Expose } from 'class-transformer'\nimport { BaseEntity } from 'src/common/entities/base.entity'\nimport { Column, Entity } from 'typeorm'\n\n/**\n * User Entity\n */\n@Entity('users', {\n  orderBy: {\n    createdAt: 'DESC',\n  },\n})\nexport class User extends BaseEntity {\n  @Column()\n  firstName: string\n\n  @Column()\n  lastName: string\n\n  @Column({ unique: true })\n  email: string\n\n  @ApiHideProperty()\n  @Exclude({ toPlainOnly: true })\n  @Column()\n  password: string\n\n  @Expose()\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`\n  }\n\n  // add more columns here\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n            \n                Description\n            \n            \n                Basic User Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changeUserPassword\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            changeUserPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changeUserPassword(user: IJwtUser, changePasswordDto: ChangePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('change-password')@RouteDoc({operation: 'Change user password', notFound: true, conflict: true, created: undefined})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:93\n                \n            \n\n\n            \n                \n                    Change user password\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IJwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        IJwtUser\n\n                                    \n                                \n                                \n                                    changePasswordDto\n                                    \n                                                ChangePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ChangePasswordDto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(user: IJwtUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()@RouteDoc({operation: 'Delete user', notFound: true, ok: undefined})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:76\n                \n            \n\n\n            \n                \n                    Delete user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IJwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : IJwtUser\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@RouteDoc({operation: 'Find all users', ok: undefined})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:27\n                \n            \n\n\n            \n                \n                    Find All Users\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId')@RouteDoc({operation: 'FInd user by id', notFound: true, ok: undefined})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:42\n                \n            \n\n\n            \n                \n                    Find User By userId\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(updateUserDto: UpdateUserDto, user: IJwtUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@RouteDoc({operation: 'Update user details', notFound: true, ok: undefined})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:58\n                \n            \n\n\n            \n                \n                    Update authorized user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : UpdateUserDto\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                                IJwtUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        IJwtUser\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, ParseUUIDPipe, Patch, Post } from '@nestjs/common'\nimport { IJwtUser } from 'src/auth/interfaces/jwt-interface'\nimport { ApiDoc } from 'src/common/decorators/api-doc.decorator'\nimport { RouteDoc } from 'src/common/decorators/route-doc.decorator'\nimport { UserFromRequest } from 'src/common/decorators/user-from-request.decorator'\nimport { ChangePasswordDto, UpdateUserDto } from './dto/user.dto'\nimport { User } from './entity/user.entity'\nimport { UserService } from './user.service'\n\n/**\n * Basic User Controller\n */\n@ApiDoc({ tag: 'users' })\n@Controller('users')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  /**\n   * Find All Users\n   * @returns Promise\n   */\n  @Get()\n  @RouteDoc({\n    operation: 'Find all users',\n    ok: { type: User, isArray: true },\n  })\n  async findAll(): Promise {\n    return await this.userService.findAll()\n  }\n\n  /**\n   * Find User By userId\n   * @param userId: string\n   * @returns Promise\n   */\n  @Get(':userId')\n  @RouteDoc({\n    operation: 'FInd user by id',\n    notFound: true,\n    ok: { type: User },\n  })\n  async findOne(@Param('userId', ParseUUIDPipe) userId: string): Promise {\n    return await this.userService.findOne(userId)\n  }\n\n  /**\n   * Update authorized user\n   * @param updateUserDto: UpdateUserDto\n   * @param user IJwtUser\n   * @returns Promise\n   */\n  @Patch()\n  @RouteDoc({\n    operation: 'Update user details',\n    notFound: true,\n    ok: { type: User },\n  })\n  async update(\n    @Body() updateUserDto: UpdateUserDto,\n    @UserFromRequest() user: IJwtUser,\n  ): Promise {\n    return await this.userService.update(updateUserDto, user.id)\n  }\n\n  /**\n   * Delete user\n   * @param user: IJwtUser\n   * @returns Promise\n   */\n  @Delete()\n  @RouteDoc({\n    operation: 'Delete user',\n    notFound: true,\n    ok: { type: '' },\n  })\n  async delete(@UserFromRequest() user: IJwtUser): Promise {\n    return await this.userService.delete(user.id)\n  }\n\n  /**\n   * Change user password\n   * @param user IJwtUser\n   * @param changePasswordDto ChangePasswordDto\n   * @returns Promise\n   */\n  @Post('change-password')\n  @RouteDoc({\n    operation: 'Change user password',\n    notFound: true,\n    conflict: true,\n    created: { type: '' },\n  })\n  async changeUserPassword(\n    @UserFromRequest() user: IJwtUser,\n    @Body() changePasswordDto: ChangePasswordDto,\n  ): Promise {\n    return await this.userService.changeUserPassword(user.id, changePasswordDto)\n  }\n\n  // TODO: MAKE REUSABLE @RouteDoc + update readme\n  // add more routes handlers here\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nPasswordService\n\nPasswordService\n\nUserModule -->\n\nPasswordService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n        \n            Description\n        \n        \n            User module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PasswordService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { PasswordService } from 'src/common/services/password.service'\nimport { User } from './entity/user.entity'\nimport { UserController } from './user.controller'\nimport { UserService } from './user.service'\n\n/**\n * User module\n */\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UserController],\n  providers: [UserService, PasswordService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n            \n                Description\n            \n            \n                Basic User Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changeUserPassword\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            changeUserPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changeUserPassword(userId: string, changePasswordDto: ChangePasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:101\n                \n            \n\n\n            \n                \n                    Change user password\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string\n\n                                    \n                                \n                                \n                                    changePasswordDto\n                                    \n                                                ChangePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ChangePasswordDto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:57\n                \n            \n\n\n            \n                \n                    Create new user. Used by Auth Service when signup new user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : CreateUserDto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        : Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:89\n                \n            \n\n\n            \n                \n                    Delete authorized user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        : Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:24\n                \n            \n\n\n            \n                \n                    Find All Users\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:33\n                \n            \n\n\n            \n                \n                    Find user by id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        : Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:46\n                \n            \n\n\n            \n                \n                    Find user by email\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(updateUserDto: UpdateUserDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:75\n                \n            \n\n\n            \n                \n                    Update authorized user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : UpdateUserDto\n\n                                    \n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        : Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { PasswordService } from 'src/common/services/password.service'\nimport { throwNotFoundIfNull } from 'src/common/utils/check-not-found.utls'\nimport { Repository } from 'typeorm'\nimport { ChangePasswordDto, CreateUserDto, UpdateUserDto } from './dto/user.dto'\nimport { User } from './entity/user.entity'\n\n/**\n * Basic User Service\n */\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    private readonly passwordService: PasswordService,\n  ) {}\n\n  /**\n   * Find All Users\n   * @returns Promise\n   */\n  async findAll(): Promise {\n    return await this.userRepository.find({})\n  }\n\n  /**\n   * Find user by id\n   * @param id: string\n   * @returns: Promise\n   */\n  async findOne(id: string): Promise {\n    const user = await this.userRepository.findOne(id)\n    if (!user) {\n      throw new NotFoundException('User with provided id not found')\n    }\n    return user\n  }\n\n  /**\n   * Find user by email\n   * @param email: string\n   * @returns Promise\n   */\n  async findOneByEmail(email: string): Promise {\n    const user = await this.userRepository.findOne({ email })\n    throwNotFoundIfNull(user)\n    return user\n  }\n\n  /**\n   * Create new user. Used by Auth Service when signup new user\n   * @param createUserDto: CreateUserDto\n   * @returns: Promise\n   */\n  async create(createUserDto: CreateUserDto): Promise {\n    const existingUser = await this.userRepository.findOne({ email: createUserDto.email })\n    if (existingUser) {\n      throw new ConflictException('User with provided email already exists')\n    }\n    const user = this.userRepository.create({\n      ...createUserDto,\n      password: await this.passwordService.hashPassword(createUserDto.password),\n    })\n    return await this.userRepository.save(user)\n  }\n\n  /**\n   * Update authorized user\n   * @param updateUserDto: UpdateUserDto\n   * @param userId: string\n   * @returns: Promise\n   */\n  async update(updateUserDto: UpdateUserDto, userId: string): Promise {\n    const user = await this.userRepository.preload({\n      id: userId,\n      ...updateUserDto,\n    })\n    throwNotFoundIfNull(user)\n    return await this.userRepository.save(user)\n  }\n\n  /**\n   * Delete authorized user\n   * @param userId: string\n   * @returns: Promise\n   */\n  async delete(userId: string): Promise {\n    const user = await this.userRepository.findOne(userId)\n    throwNotFoundIfNull(user)\n    await this.userRepository.delete(userId)\n  }\n\n  /**\n   * Change user password\n   * @param userId string\n   * @param changePasswordDto ChangePasswordDto\n   * @returns Promise\n   */\n  async changeUserPassword(userId: string, changePasswordDto: ChangePasswordDto): Promise {\n    const dbUser = await this.userRepository.findOne(userId)\n    throwNotFoundIfNull(dbUser)\n    const isPassEqual = await this.passwordService.comparePassword(\n      dbUser.password,\n      changePasswordDto.password,\n    )\n    if (isPassEqual) {\n      throw new ConflictException('New password must differ from existing one')\n    }\n    dbUser.password = await this.passwordService.hashPassword(changePasswordDto.password)\n    await this.userRepository.save(dbUser)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ValidateBodyGuard.html":{"url":"guards/ValidateBodyGuard.html","title":"guard - ValidateBodyGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    ValidateBodyGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/validate-body.guard.ts\n            \n\n                \n                Description\n                \n                \n                    Guard to validate request body in cases validation must be dome before other guards\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(ValidateClass)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/validate-body.guard.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ValidateClass\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/validate-body.guard.ts:20\n                \n            \n\n\n            \n                \n                    Method which triggers when guard is launched, decides whether to pass request or not\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ExecutionContext\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, ExecutionContext, CanActivate, BadRequestException } from '@nestjs/common'\nimport { plainToClass } from 'class-transformer'\n\nimport { validate } from 'class-validator'\n\nclass IValidateClass {}\n\n/**\n * Guard to validate request body in cases validation must be dome before other guards\n */\n@Injectable()\nexport class ValidateBodyGuard implements CanActivate {\n  constructor(private readonly ValidateClass: typeof IValidateClass) {}\n\n  /**\n   * Method which triggers when guard is launched, decides whether to pass request or not\n   * @param context ExecutionContext\n   * @returns Promise\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest()\n    const { body } = request\n    const bodyClass = plainToClass(this.ValidateClass, body)\n    const validationResult = await validate(bodyClass)\n    if (validationResult && validationResult.length) {\n      throw new BadRequestException(\n        validationResult.map((err) => {\n          const [errMsg] = Object.values(err.constraints)\n          return errMsg\n        }),\n      )\n    }\n    return true\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WrapResponseInterceptor.html":{"url":"injectables/WrapResponseInterceptor.html","title":"injectable - WrapResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  WrapResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/wrap-rsponse.interceptor.ts\n        \n\n            \n                Description\n            \n            \n                Interceptor which wraps response, adds status code and timestamp\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/wrap-rsponse.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CallHandler, ExecutionContext, Injectable, NestInterceptor } from '@nestjs/common'\nimport { classToPlain } from 'class-transformer'\nimport { Response } from 'express'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\n/**\n * Interceptor which wraps response, adds status code and timestamp\n */\n@Injectable()\nexport class WrapResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const response = context.switchToHttp().getResponse()\n    return next.handle().pipe(\n      map((data) => ({\n        status: response.statusCode,\n        timestamp: Date.now(),\n        length: data ? data.length : 0,\n        data: classToPlain(data),\n      })),\n    )\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/auth/dto/auth-response.ts\n            \n            class\n            AuthResponse\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/auth/dto/signin-user.dto.ts\n            \n            class\n            SigninUserDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt-auth.stategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local-auth.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/common/decorators/api-doc.decorator.ts\n            \n            interface\n            IApiDocOptions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/decorators/api-doc.decorator.ts\n            \n            variable\n            ApiDoc\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/public-route.decorator.ts\n            \n            variable\n            IS_PUBLIC_ROUTE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/public-route.decorator.ts\n            \n            variable\n            PublicRoute\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/route-doc.decorator.ts\n            \n            interface\n            IRoteDocOptions\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/common/decorators/route-doc.decorator.ts\n            \n            variable\n            RouteDoc\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/user-from-request.decorator.ts\n            \n            variable\n            UserFromRequest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/entities/base.entity.ts\n            \n            class\n            BaseEntity\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/common/guards/validate-body.guard.ts\n            \n            class\n            IValidateClass\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guards/validate-body.guard.ts\n            \n            guard\n            ValidateBodyGuard\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/response-timeout.interceptor.ts\n            \n            injectable\n            ResponseTimeoutInterceptor\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/common/interceptors/wrap-rsponse.interceptor.ts\n            \n            injectable\n            WrapResponseInterceptor\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/common/services/password.service.ts\n            \n            injectable\n            PasswordService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/common/utils/check-not-found.utls.ts\n            \n            function\n            throwNotFoundIfNull\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/validation.schema.ts\n            \n            variable\n            createValidationSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/migrations/1614798846236-SchemaSync.ts\n            \n            class\n            SchemaSync1614798846236\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/dto/user.dto.ts\n            \n            class\n            BasicUserDto\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/user/dto/user.dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/user/dto/user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/user/dto/user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/entity/user.entity.ts\n            \n            class\n            User\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                88 %\n                (8/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/common : ^7.5.1\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.5.1\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.5.1\n        \n            @nestjs/swagger : ^4.7.12\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            dotenv : ^8.2.0\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.3\n        \n            swagger-ui-express : ^4.1.6\n        \n            typeorm : ^0.2.30\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            throwNotFoundIfNull   (src/.../check-not-found.utls.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/utils/check-not-found.utls.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            throwNotFoundIfNull\n                        \n                        \n                    \n                \n            \n            \n                \nthrowNotFoundIfNull(entity)\n                \n            \n\n\n\n\n            \n                \n                    Generic function which checks if provided entity is null and throws not found exception\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entity\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : typeof \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNestJS + PostgreSQL + Docker Starter Template\nDescription\nStarter Template for building apps with Nest.js backend and PostgreSQL database, wrapped in docker containers.\nMain purpose of this starter is to save developers time, which is usually spend on creating basic skeletons, configs and getting all together when building the apps.\nWhat's inside\n\n PostgreSQL local database\n Nest.js as backend server\n Environments are splitted (development/production)\n Configs setup\n Some basic backend examples(module+service+controller+entity)\n Git hooks support (pre-commit + commit-msg)\n Conventional Commits Support\n Docker + docker-compose configs\n Bash scripts for one-command docker launch\n Pm2 support for production\n Migrations support for production\n\nBefore use\nEnvs\nYou need to setup envs before using the starter.\n$ touch .env # create env file\n\n# check .env.example for envs names\n# setup envs in .env according to prod/dev/debug modeGit Hooks\nStarter has git hooks support and alrady has pre-commit and commit hooks added:\n\npre-commit hook start eslint check on backend. if eslint fails, the commit won't happen with errors logs output and tip what to do. Hooks can be updated to add some actions, e.g. eslint for possible frontend.\ncommit-msg hook checks if the commit message corresponds with conventional commits. Starter uses git-conventional-commits. Please check it's docs and modify settings if needed.\nNOTE: \nTo use conventional commits:\n\n  # install package\n  npm install --global git-conventional-commits\n\n  # give access to hooks files to make it work\n  chmod +x .git-hooks/commit-msg\n  chmod +x .git-hooks/pre-commit\nHow to use\nStarter has 2 docker containers - one for database and one for backend. All configs are set up. Everything can be started via docker-compose one-line commands.\nNote: you may need \"sudo\" for bash.\n\nBefore first launch:\n # before fisrt start\n npm install # to avoid ts warnings in ide\n[sudo] docker-compose build # build containers, also use it for rebuilding existing containers\nStart/stop app:\n  [sudo] docker-compose up # start containers\n\n  # Note: you can run container in a detached mode\n  [sudo] docker-compose up -d\n  # To check containers logs\n  [sudo] docker-compose logs -f\n  # To stop containers\n  [sudo] docker-container down # stops and removes containers\n  # To restart containers\n  [sudo] docker-container restartNOTE:\nIn dev mode migrations are applied automatically via nest-typeorm synchronize prop.\nIn production mode migrations are generated via typeorm cli together with the server launch when launching containers. No need to create or generate it manually before launch of server, everything can be done automatically when containers start.\n\n\nWhat's next\nMain purpose of this starter template is to rid developers of creating the basic projects skeleton and spending a lot of time with setting up basic projects configs.\nFeel free to use this starter template for building own apps, modify it as you need and actually change it whatever you like to fit your project demands.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\nUserModule -->\n\nPasswordService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiDoc   (src/.../api-doc.decorator.ts)\n                        \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            createValidationSchema   (src/.../validation.schema.ts)\n                        \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            IS_PUBLIC_ROUTE   (src/.../public-route.decorator.ts)\n                        \n                        \n                            PublicRoute   (src/.../public-route.decorator.ts)\n                        \n                        \n                            RouteDoc   (src/.../route-doc.decorator.ts)\n                        \n                        \n                            UserFromRequest   (src/.../user-from-request.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/api-doc.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ApiDoc\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ({ tag = '', isPublic = false }: IApiDocOptions) => {\n  const decorators = [\n    ApiTags(tag),\n    ApiBadRequestResponse({ description: 'Bad Request' }),\n    ApiInternalServerErrorResponse({ description: 'Internal Server Error' }),\n  ]\n\n  if (!isPublic)\n    decorators.push(ApiBearerAuth(), ApiUnauthorizedResponse({ description: 'Unauthorized' }))\n\n  return applyDecorators(...decorators)\n}\n                        \n                    \n\n                \n                    \n                        Decorator for swagger docs controller\n\n                    \n                \n\n            \n        \n\n    src/config/app.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            appConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs('app', () => ({\n  port: parseInt(process.env.PORT),\n  nodeEnv: process.env.NODE_ENV,\n  jwtSecret: process.env.JWT_SECRET,\n  jwtExpires: process.env.JWT_EXPIRES,\n}))\n                        \n                    \n\n\n            \n        \n\n    src/config/validation.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            createValidationSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () =>\n  object({\n    NODE_ENV: string().required(),\n    PORT: number().required(),\n    JWT_SECRET: string().required(),\n    JWT_EXPIRES: string().required(),\n    POSTGRES_USER: string().required(),\n    POSTGRES_PASSWORD: string().required(),\n    POSTGRES_DB: string().required(),\n    POSTGRES_HOST: string().required(),\n    POSTGRES_PORT: number().required(),\n  })\n                        \n                    \n\n                \n                    \n                        Envs validation schema\n\n                    \n                \n\n            \n        \n\n    src/config/database.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            databaseConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs('database', () => ({\n  port: parseInt(process.env.POSTGRES_PORT),\n  host: process.env.POSTGRES_HOST,\n  username: process.env.POSTGRES_USER,\n  password: process.env.POSTGRES_PASSWORD,\n  name: process.env.POSTGRES_DB,\n}))\n                        \n                    \n\n\n            \n        \n\n    src/common/decorators/public-route.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            IS_PUBLIC_ROUTE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'IS_PUBLIC_ROUTE'\n                        \n                    \n\n                \n                    \n                        Constant for public route\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PublicRoute\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => SetMetadata(IS_PUBLIC_ROUTE, true)\n                        \n                    \n\n                \n                    \n                        Decorator to set public route metadata\n\n                    \n                \n\n            \n        \n\n    src/common/decorators/route-doc.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            RouteDoc\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ({\n  operation,\n  conflict,\n  notFound,\n  ok,\n  created,\n  accepted,\n}: IRoteDocOptions) => {\n  const decorators = []\n  if (operation) decorators.push(ApiOperation({ description: operation }))\n  if (conflict) decorators.push(ApiConflictResponse({ description: 'Already exists' }))\n  if (notFound) decorators.push(ApiNotFoundResponse({ description: 'Not found' }))\n  if (ok) {\n    decorators.push(ApiOkResponse({ description: 'Ok', type: ok.type, isArray: ok.isArray }))\n  }\n  if (created) {\n    decorators.push(\n      ApiCreatedResponse({ description: 'Created', type: created.type, isArray: created.isArray }),\n    )\n  }\n  if (accepted) {\n    decorators.push(\n      ApiAcceptedResponse({\n        description: 'Accepted',\n        type: accepted.type,\n        isArray: accepted.isArray,\n      }),\n    )\n  }\n\n  return applyDecorators(...decorators)\n}\n                        \n                    \n\n                \n                    \n                        Common route docs swagger decorator\n\n                    \n                \n\n            \n        \n\n    src/common/decorators/user-from-request.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserFromRequest\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): IJwtUser => {\n    const request = ctx.switchToHttp().getRequest()\n    return request.user\n  },\n)\n                        \n                    \n\n                \n                    \n                        Decorator to extract authed user from request\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
